{
  "api/DOTSDynamicBone.DOTSDynamicBone.FreezeAxis.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.FreezeAxis.html",
    "title": "Enum DOTSDynamicBone.FreezeAxis | DOTS Dynamic Bone",
    "keywords": "Enum DOTSDynamicBone.FreezeAxis Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum FreezeAxis Fields Name Description None X Y Z"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.html",
    "title": "Struct DOTSDynamicBone | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBone This is a DOTSDynamicBone. This struct holds data used for calculations Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct DOTSDynamicBone : IComponentData Remarks This is a DOTSDynamicBone. This struct holds data used for calculations Fields Disabled Set this to true to disable calculations on the bone Declaration public bool Disabled Field Value Type Description System.Boolean set to true to disable all particle calculations within the bone set m_Core Declaration public ParticleTransform m_Core Field Value Type Description ParticleTransform This is a ParticleTransform that stores the data related to the m_RootEntity Transform m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the bones slowed down. m_DistanceToObject Declaration public float m_DistanceToObject Field Value Type Description System.Single how far the Referenced Entity has to be in order for m_DistantDisable to be true m_DistantDisable Declaration public bool m_DistantDisable Field Value Type Description System.Boolean Disable physics simulation automatically if the entity is far from a specified Entity. m_DistantDisabled Declaration public bool m_DistantDisabled Field Value Type Description System.Boolean if true then physics calculations have been disabled on this bone. m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each bone to original orientation. m_EndLength Declaration public float m_EndLength Field Value Type Description System.Single If End Length is not zero, an extra bone is generated at the end of transform hierarchy. m_EndOffset Declaration public float3 m_EndOffset Field Value Type Description float3 If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. m_Force Declaration public float3 m_Force Field Value Type Description float3 The force apply to bones. m_FreezeAxis Declaration public DOTSDynamicBone.FreezeAxis m_FreezeAxis Field Value Type Description DOTSDynamicBone.FreezeAxis Constrain bones to move on specified plane. m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the bones slowed down when collide. m_Gravity Declaration public float3 m_Gravity Field Value Type Description float3 The force apply to bones. Partial force apply to character's initial pose is cancelled out. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much character's position change is ignored in physics simulation. m_LocalGravity Declaration public float3 m_LocalGravity Field Value Type Description float3 local gravity of the bone m_MaxRestLength Declaration public float m_MaxRestLength Field Value Type Description System.Single NOT IMPLMENTED, TODO: determine if I want to implement this... m_ParentAnimatedLocalToRootIndex Declaration public int m_ParentAnimatedLocalToRootIndex Field Value Type Description System.Int32 This is the Root DynamicBone Particle's parent index in the AnimatedLocalToRoot DynamicBuffer m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each bone can be a sphere to collide with colliders. Radius describe sphere's size. m_ReferenceObject Declaration public ParticleTransform m_ReferenceObject Field Value Type Description ParticleTransform A PArticleTransform that represents the ReferendEntity's Transform m_ReferenceObjectEntity Declaration public Entity m_ReferenceObjectEntity Field Value Type Description Entity The Entity to use in the DistantDisable determination m_RigComponentEntity Declaration public Entity m_RigComponentEntity Field Value Type Description Entity This is the entity Entity that contained the RigComponent. Most likely this will be the same as the m_RootEntity m_RootAnimatedLocalToRootIndex Declaration public int m_RootAnimatedLocalToRootIndex Field Value Type Description System.Int32 This is the index that the Root Entity's AnimatedLocalToRootIndex index. This will always most likly be 0 since it is the root m_RootEntity Declaration public Entity m_RootEntity Field Value Type Description Entity This is the Entity if the root transform (not to be confused with the RootBone Entity) m_RootParentEntity Declaration public Entity m_RootParentEntity Field Value Type Description Entity The root DynamicBone has a parent, and this Entity is that parent. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much bone's original orientation are preserved. m_UpdateMode Declaration public DOTSDynamicBone.UpdateMode m_UpdateMode Field Value Type Description DOTSDynamicBone.UpdateMode Internal physics simulation mode. m_UpdateRate Declaration public float m_UpdateRate Field Value Type Description System.Single Internal physics simulation rate. m_Weight Declaration public float m_Weight Field Value Type Description System.Single weight of bone. UpdateLocalToWorldTransforms Declaration public bool UpdateLocalToWorldTransforms Field Value Type Description System.Boolean this lets you know if the bone has given the DOTSDynamicBoneParticleLocalToWorldOverride_Tag tag. It currently has no other use but will be given one later UseAnimatedLocalToRoot Declaration public bool UseAnimatedLocalToRoot Field Value Type Description System.Boolean set this to true to have all calculated values be converted into AnimatedLocalToRootValues (required for it to not look weird, but disable it if you want, it's your game) Methods Create(GameObjectConversionSystem, RigComponent, Transform, DOTSDynamicBoneClass, Single) V0.8.3+ Creates a DOTSDynamicBone using the given information Declaration public static DOTSDynamicBone Create(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, DOTSDynamicBoneClass boneComponent, float maxRestLength = 0.2F) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem GameObjectConversionSystem RigComponent RigComponent RigComponent Transform Root Root Transform DOTSDynamicBoneClass boneComponent DOTSDynamicBoneClass System.Single maxRestLength NOT IMPLEMENTED Returns Type Description DOTSDynamicBone DOTSDynamicBone Create(GameObjectConversionSystem, RigComponent, Transform, Boolean, Boolean, Transform, Single, DOTSDynamicBone.UpdateMode, Single, Single, Single, Single, Single, Single, Single, float3, float3, float3, DOTSDynamicBone.FreezeAxis, Boolean, Single, float3, float3, float3, Single, Single, Single, Single, Boolean, Single, Boolean) Declaration public static DOTSDynamicBone Create(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, bool useAnimatedLocalToRoot, bool updateLocalToWorld, Transform referencedObject = null, float updateRate = 60F, DOTSDynamicBone.UpdateMode updateMode = DOTSDynamicBone.UpdateMode.Default, float damping = 0.1F, float elasticity = 0.1F, float stiffness = 0.1F, float inert = 0F, float friction = 0F, float radius = 0F, float endLength = 0F, float3 endOffset = null, float3 gravity = null, float3 force = null, DOTSDynamicBone.FreezeAxis freezeAxis = DOTSDynamicBone.FreezeAxis.None, bool distantDisable = false, float distanceToObject = 20F, float3 localGravity = null, float3 objectMove = null, float3 objectPrevPosition = null, float boneTotalLength = 0F, float objectScale = 1F, float time = 0F, float weight = 1F, bool distantDisabled = false, float maxRestLength = 0.2F, bool disabled = false) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem RigComponent RigComponent Transform Root System.Boolean useAnimatedLocalToRoot System.Boolean updateLocalToWorld Transform referencedObject System.Single updateRate DOTSDynamicBone.UpdateMode updateMode System.Single damping System.Single elasticity System.Single stiffness System.Single inert System.Single friction System.Single radius System.Single endLength float3 endOffset float3 gravity float3 force DOTSDynamicBone.FreezeAxis freezeAxis System.Boolean distantDisable System.Single distanceToObject float3 localGravity float3 objectMove float3 objectPrevPosition System.Single boneTotalLength System.Single objectScale System.Single time System.Single weight System.Boolean distantDisabled System.Single maxRestLength System.Boolean disabled Returns Type Description DOTSDynamicBone V0.8.2.1 Creates a DOTSDynamicBone using the given information Disable(ref DynamicBuffer<Particle>) Disables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Disable(ref DynamicBuffer<Particle> m_Particles) Parameters Type Name Description DynamicBuffer < Particle > m_Particles particles to be disabled Enable(ref DynamicBuffer<Particle>) Enables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Enable(ref DynamicBuffer<Particle> m_Particles) Parameters Type Name Description DynamicBuffer < Particle > m_Particles particles to be enabled GetWeight() Declaration public float GetWeight() Returns Type Description System.Single Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone.UpdateMode.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.UpdateMode.html",
    "title": "Enum DOTSDynamicBone.UpdateMode | DOTS Dynamic Bone",
    "keywords": "Enum DOTSDynamicBone.UpdateMode Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum UpdateMode Fields Name Description AnimatePhysics Default Normal UnscaledTime"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone_BufferElement.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone_BufferElement.html",
    "title": "Struct DOTSDynamicBone_BufferElement | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBone_BufferElement This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer Implements IBufferElementData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct DOTSDynamicBone_BufferElement : IBufferElementData Remarks This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer Fields end Declaration public int end Field Value Type Description System.Int32 end index in a Particle DynamicBuffer start Declaration public int start Field Value Type Description System.Int32 start index in a Particle DynamicBuffer Value Declaration public DOTSDynamicBone Value Field Value Type Description DOTSDynamicBone A DOTSDynamicBone Implements IBufferElementData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneClass.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneClass.html",
    "title": "Class DOTSDynamicBoneClass | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneClass This holds and displays all the data needs to modify to create the DOTSDynamicBone data Inheritance System.Object DOTSDynamicBoneClass Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public class DOTSDynamicBoneClass Remarks This holds and displays all the data needs to modify to create the DOTSDynamicBone data Fields Disable Declaration public bool Disable Field Value Type Description System.Boolean Set to true to disable the calculations done on the the bones Particles m_Colliders Declaration public List<DOTSDynamicBoneCollider> m_Colliders Field Value Type Description System.Collections.Generic.List < DOTSDynamicBoneCollider > Collider objects interact with the bones. m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the bones slowed down. m_DampingDistrib Declaration public AnimationCurve m_DampingDistrib Field Value Type Description AnimationCurve How much the bones slowed down over a distribution curve. m_DistanceToObject Declaration public float m_DistanceToObject Field Value Type Description System.Single distnace the Entity has to be from the re m_DistantDisable Declaration public bool m_DistantDisable Field Value Type Description System.Boolean Disable physics simulation automatically if Entity is far from the m_ReferencedObject Entity. m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each bone to original orientation. m_ElasticityDistrib Declaration public AnimationCurve m_ElasticityDistrib Field Value Type Description AnimationCurve How much the force applied to return each bone to original orientation over a distribution curve. m_EndLength Declaration public float m_EndLength Field Value Type Description System.Single If End Length is not zero, an extra bone is generated at the end of transform hierarchy. m_EndOffset Declaration public Vector3 m_EndOffset Field Value Type Description Vector3 If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. m_Exclusions Declaration public List<Transform> m_Exclusions Field Value Type Description System.Collections.Generic.List < Transform > Bones excluded from physics simulation. m_Force Declaration public Vector3 m_Force Field Value Type Description Vector3 The force apply to bones. m_FreezeAxis Declaration public DOTSDynamicBone.FreezeAxis m_FreezeAxis Field Value Type Description DOTSDynamicBone.FreezeAxis Constrain bones to move on specified plane. m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the bones slowed down when collide. m_FrictionDistrib Declaration public AnimationCurve m_FrictionDistrib Field Value Type Description AnimationCurve How much the bones slowed down when collide over a distribution curve. m_Gravity Declaration public Vector3 m_Gravity Field Value Type Description Vector3 The force apply to bones. Partial force apply to character's initial pose is cancelled out. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much character's position change is ignored in physics simulation. m_InertDistrib Declaration public AnimationCurve m_InertDistrib Field Value Type Description AnimationCurve How much character's position change is ignored in physics simulation over a distribution curve. m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each bone can be a sphere to collide with colliders. Radius describe sphere's size. m_RadiusDistrib Declaration public AnimationCurve m_RadiusDistrib Field Value Type Description AnimationCurve Each bone can be a sphere to collide with colliders. Radius describe sphere's size over a distribution curve. m_ReferenceObject Declaration public Transform m_ReferenceObject Field Value Type Description Transform Entity to be referenced for m_DistantDisable m_Root Declaration public Transform m_Root Field Value Type Description Transform The root of the transform hierarchy to apply physics. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much bone's original orientation are preserved. m_StiffnessDistrib Declaration public AnimationCurve m_StiffnessDistrib Field Value Type Description AnimationCurve How much bone's original orientation are preserved over a distribution curve. m_UpdateMode Declaration public DOTSDynamicBone.UpdateMode m_UpdateMode Field Value Type Description DOTSDynamicBone.UpdateMode Internal physics simulation type. m_UpdateRate Declaration public float m_UpdateRate Field Value Type Description System.Single Internal physics simulation rate. Name Declaration public string Name Field Value Type Description System.String Just The name of the root bone (so you can see it in the editor easier, changing it won't break anything but may confuse you RigComponent Declaration public RigComponent RigComponent Field Value Type Description RigComponent This should be the GameObject this script is attached to UpdateLocalToWorldTransforms Declaration public bool UpdateLocalToWorldTransforms Field Value Type Description System.Boolean Set to true to update the LocalToWorld of the Particle's Corresponding Entity UseAnimatedLocalToRoot Declaration public bool UseAnimatedLocalToRoot Field Value Type Description System.Boolean Set to true if the entity is Animated using th Unity.Animations Package Methods ToDOTSDynamicBone(GameObjectConversionSystem, RigComponent, Transform, EntityManager, Entity, DOTSDynamicBoneClass) Creates a valid DOTSDynamicBone Declaration public DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, EntityManager dstManager, Entity rootEntity, DOTSDynamicBoneClass boneComponent) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem Provided GameObjectConversionSystem RigComponent RigComponent RigComponent to be used on the conversion Transform Root The Root GameObject with the RigComponent EntityManager dstManager EntityManager Entity rootEntity Entity where the root DOTSDynamicBone will affect DOTSDynamicBoneClass boneComponent Bone related data Returns Type Description DOTSDynamicBone DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem, RigComponent, Transform, EntityManager, Entity, DOTSDynamicBoneClass, ref DynamicBuffer<Particle>) Creates a valid DOTSDynamicBone Declaration public DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, EntityManager dstManager, Entity rootEntity, DOTSDynamicBoneClass boneComponent, ref DynamicBuffer<Particle> m_Particles) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem Provided GameObjectConversionSystem RigComponent RigComponent RigComponent to be used on the conversion Transform Root The Root GameObject with the RigComponent EntityManager dstManager EntityManager Entity rootEntity Entity where the root DOTSDynamicBone will affect DOTSDynamicBoneClass boneComponent Bone related data DynamicBuffer < Particle > m_Particles Buffer of particles to ppopulate with data. Returns Type Description DOTSDynamicBone DOTSDynamicBone UpdateName() Updates the name of the Name property. (Used only in the Editor) Declaration public void UpdateName()"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneComponent.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneComponent.html",
    "title": "Class DOTSDynamicBoneComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneComponent This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent Inheritance System.Object DOTSDynamicBoneComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneComponent : MonoBehaviour, IConvertGameObjectToEntity Remarks This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent Fields m_DOTSDynamicBone This is the DOTSDynamicBone Editor friendly Component. Declaration public DOTSDynamicBoneClass m_DOTSDynamicBone Field Value Type Description DOTSDynamicBoneClass This is the DOTSDynamicBone Editor friendly Component. Remarks This must be placed on an Entity with a RigComponent. This is to ensure easy data access and the ability to use Burst ScheduleParallel Jobs Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Sets up the Entity during conversion Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity The entity the GameObject will be convert to. EntityManager dstManager The provided Entitymanager for conversion. GameObjectConversionSystem conversionSystem The provided GameObjectConversionSystem for conversion. Start() Declaration public void Start() Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneParticleLocalToWorldOverride_Tag.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneParticleLocalToWorldOverride_Tag.html",
    "title": "Struct DOTSDynamicBoneParticleLocalToWorldOverride_Tag | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneParticleLocalToWorldOverride_Tag This is a tag that is added to entities that you want to have modified by the DOTSDynamicBoneSystem Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneParticleLocalToWorldOverride_Tag : IComponentData Remarks This is a tag that is added to entities that you want to have modified by the DOTSDynamicBoneSystem Fields overrideExportPhysicsWorld Declaration public bool overrideExportPhysicsWorld Field Value Type Description System.Boolean NOT IMPLEMENTED, coming soon ;) Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBonesComponent.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBonesComponent.html",
    "title": "Class DOTSDynamicBonesComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBonesComponent Inheritance System.Object DOTSDynamicBonesComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBonesComponent : MonoBehaviour, IConvertGameObjectToEntity Fields Bones Declaration public List<DOTSDynamicBoneClass> Bones Field Value Type Description System.Collections.Generic.List < DOTSDynamicBoneClass > RigComponent Declaration public RigComponent RigComponent Field Value Type Description RigComponent Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem GetMeshRenderers(RigComponent) This returns a list of SkinnedMeshedRenderers attach to the given RigComponent Declaration public List<SkinnedMeshRenderer> GetMeshRenderers(RigComponent rig) Parameters Type Name Description RigComponent rig Returns Type Description System.Collections.Generic.List < SkinnedMeshRenderer > Start() Declaration public void Start() Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.DOTSPlane.html": {
    "href": "api/DOTSDynamicBone.DOTSPlane.html",
    "title": "Struct DOTSPlane | DOTS Dynamic Bone",
    "keywords": "Struct DOTSPlane A DOTS representation of a Unity Plane Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSPlane : IComponentData Remarks A DOTS representation of a Unity Plane Constructors DOTSPlane(float3, float3) Declaration public DOTSPlane(float3 inNormal, float3 inPoint) Parameters Type Name Description float3 inNormal float3 inPoint DOTSPlane(float3, float3, float3) Declaration public DOTSPlane(float3 a, float3 b, float3 c) Parameters Type Name Description float3 a float3 b float3 c DOTSPlane(float3, Single) Declaration public DOTSPlane(float3 inNormal, float distance) Parameters Type Name Description float3 inNormal System.Single distance Properties distance Declaration public float distance { get; set; } Property Value Type Description System.Single flipped Declaration public readonly DOTSPlane flipped { get; } Property Value Type Description DOTSPlane normal Declaration public float3 normal { get; set; } Property Value Type Description float3 Methods ClosestPointOnPlane(float3) Declaration public float3 ClosestPointOnPlane(float3 point) Parameters Type Name Description float3 point Returns Type Description float3 Flip() Declaration public void Flip() GetDistanceToPoint(float3) Declaration public float GetDistanceToPoint(float3 point) Parameters Type Name Description float3 point Returns Type Description System.Single GetSide(float3) Declaration public bool GetSide(float3 point) Parameters Type Name Description float3 point Returns Type Description System.Boolean SameSide(float3, float3) Declaration public bool SameSide(float3 inPt0, float3 inPt1) Parameters Type Name Description float3 inPt0 float3 inPt1 Returns Type Description System.Boolean Set3Points(float3, float3, float3) Declaration public void Set3Points(float3 a, float3 b, float3 c) Parameters Type Name Description float3 a float3 b float3 c SetNormalAndPosition(float3, float3) Declaration public void SetNormalAndPosition(float3 inNormal, float3 inPoint) Parameters Type Name Description float3 inNormal float3 inPoint Translate(DOTSPlane, Vector3) Declaration public static DOTSPlane Translate(DOTSPlane plane, Vector3 translation) Parameters Type Name Description DOTSPlane plane Vector3 translation Returns Type Description DOTSPlane Translate(Vector3) Declaration public void Translate(Vector3 translation) Parameters Type Name Description Vector3 translation Implements IComponentData"
  },
  "api/DOTSDynamicBone.html": {
    "href": "api/DOTSDynamicBone.html",
    "title": "Namespace DOTSDynamicBone | DOTS Dynamic Bone",
    "keywords": "Namespace DOTSDynamicBone Classes DOTSDynamicBoneClass This holds and displays all the data needs to modify to create the DOTSDynamicBone data DOTSDynamicBoneComponent This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent DOTSDynamicBonesComponent Structs DOTSDynamicBone This is a DOTSDynamicBone. This struct holds data used for calculations DOTSDynamicBone_BufferElement This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer DOTSDynamicBoneParticleLocalToWorldOverride_Tag This is a tag that is added to entities that you want to have modified by the DOTSDynamicBoneSystem DOTSPlane A DOTS representation of a Unity Plane IndependantDOTSDynamicBone_Tag This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Particle This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data ParticleTransform This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Enums DOTSDynamicBone.FreezeAxis DOTSDynamicBone.UpdateMode"
  },
  "api/DOTSDynamicBone.IndependantDOTSDynamicBone_Tag.html": {
    "href": "api/DOTSDynamicBone.IndependantDOTSDynamicBone_Tag.html",
    "title": "Struct IndependantDOTSDynamicBone_Tag | DOTS Dynamic Bone",
    "keywords": "Struct IndependantDOTSDynamicBone_Tag This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct IndependantDOTSDynamicBone_Tag : IComponentData Remarks This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Implements IComponentData"
  },
  "api/DOTSDynamicBone.Particle.html": {
    "href": "api/DOTSDynamicBone.Particle.html",
    "title": "Struct Particle | DOTS Dynamic Bone",
    "keywords": "Struct Particle This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data Implements IBufferElementData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Particle : IBufferElementData Remarks This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data Fields AnimatedLocalToRootIndex Declaration public int AnimatedLocalToRootIndex Field Value Type Description System.Int32 The index relative to the Core Entity's AnimatedLocalToRoot and AnimatedLocalToWorld DynamicBuffer m_BoneLength Declaration public float m_BoneLength Field Value Type Description System.Single length of the bone at this particle m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the particle slowed down. m_Disabled Declaration public bool m_Disabled Field Value Type Description System.Boolean disable the particle from calculations m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each particle to original orientation. m_EndOffset Declaration public float3 m_EndOffset Field Value Type Description float3 Used for internal calculations m_Exclude Declaration public bool m_Exclude Field Value Type Description System.Boolean exclude the particle from calculations m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the particle slowed down when collide. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much particle's position change is ignored in physics simulation. m_InitLocalPosition Declaration public float3 m_InitLocalPosition Field Value Type Description float3 Used for internal calculations m_InitLocalRotation Declaration public quaternion m_InitLocalRotation Field Value Type Description quaternion Used for internal calculations m_ParentIndex Declaration public int m_ParentIndex Field Value Type Description System.Int32 The index of the parent Particle (-1 = the parent info is in the bone data) m_Position Declaration public float3 m_Position Field Value Type Description float3 Used for internal calculations m_PrevPosition Declaration public float3 m_PrevPosition Field Value Type Description float3 Used for internal calculations m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each particle can be a sphere to collide with colliders. Radius describe sphere's size. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much particle's original orientation are preserved. m_Transform Declaration public ParticleTransform m_Transform Field Value Type Description ParticleTransform The \"Transform\" of the Entity the Particle represents m_TransformEntity Declaration public Entity m_TransformEntity Field Value Type Description Entity Entity that the Particle epresents Methods CalculateParameters() Calculates the parameters based on internal data values Declaration public void CalculateParameters() Create(GameObjectConversionSystem, Transform, Boolean, Int32, Single, Single, Single, Single, Single, Single, Single, Boolean) Creates a Particle using the given arguments Declaration public static Particle Create(GameObjectConversionSystem conversionSystem, Transform t, bool exclude = false, int parentIndex = -1, float damping = 0F, float elasticity = 0F, float stiffness = 0F, float inert = 0F, float friction = 0F, float radius = 0F, float boneLength = 0F, bool isCollide = false) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObjectConversionSystem Transform t the Referenced Transform that the particle will represent System.Boolean exclude exclude the particle from calculations System.Int32 parentIndex parent index of the particle within the DynamicBuffer. (This is setup automatically and should not be modified) System.Single damping How much the particle slowed down. System.Single elasticity How much the force applied to return each particle to original orientation. System.Single stiffness How much particle's original orientation are preserved. System.Single inert How much the particle slowed down. System.Single friction How much the particle slowed down when collide. System.Single radius Each particle can be a sphere to collide with colliders. Radius describe sphere's size. System.Single boneLength length of the bone at this particle System.Boolean isCollide true if the particle is colliding Returns Type Description Particle Particle Disable() Disables the Paricle and excludes it from calculations Declaration public void Disable() Enable() Enables the Partile and includes it in calculations Declaration public void Enable() Exclude() Excludes the Particle from calculations Declaration public void Exclude() Include() Includes the Particles in calculations Declaration public void Include() Implements IBufferElementData"
  },
  "api/DOTSDynamicBone.ParticleTransform.html": {
    "href": "api/DOTSDynamicBone.ParticleTransform.html",
    "title": "Struct ParticleTransform | DOTS Dynamic Bone",
    "keywords": "Struct ParticleTransform This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ParticleTransform : IComponentData Remarks This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Constructors ParticleTransform(float3, float3, quaternion, quaternion, float3, Single, Int32) creates a new ParticleTransform using the given arguments Declaration public ParticleTransform(float3 position, float3 localPosition, quaternion rotation, quaternion localRotation, float3 localScale, float lossyScale, int childCount) Parameters Type Name Description float3 position [psotopm float3 localPosition ;pca; position quaternion rotation rotation quaternion localRotation local rotation float3 localScale local scale System.Single lossyScale lossy scale System.Int32 childCount amount of children the transform has ParticleTransform(Transform) creates a ParticleTransform from the provided Transform Declaration public ParticleTransform(Transform transform) Parameters Type Name Description Transform transform UnityEngine.Transform Fields childCount Declaration public int childCount Field Value Type Description System.Int32 amount of children the transform has localPosition Declaration public float3 localPosition Field Value Type Description float3 local position localRotation Declaration public quaternion localRotation Field Value Type Description quaternion local rotation localScale Declaration public float3 localScale Field Value Type Description float3 local scale lossyScale Declaration public float3 lossyScale Field Value Type Description float3 lossy scale position Declaration public float3 position Field Value Type Description float3 position rotation Declaration public quaternion rotation Field Value Type Description quaternion rotation Properties Null Declaration public static readonly ParticleTransform Null { get; } Property Value Type Description ParticleTransform A Null ParticleTransform Methods Equals(ParticleTransform) this compares the ParticleTransform to another one Declaration public bool Equals(ParticleTransform other) Parameters Type Name Description ParticleTransform other Returns Type Description System.Boolean SetTransform(Transform) Sets the value of the ParticleTransform using the given transform Declaration public void SetTransform(Transform transform) Parameters Type Name Description Transform transform UnityEngine.Transform ToFloat4x4(Boolean) returns a float4x4 version of the PaticleTransform's data Declaration public float4x4 ToFloat4x4(bool local = false) Parameters Type Name Description System.Boolean local set to true to use the localPosition and localRotation Returns Type Description float4x4 ToLocalToParent() converts the ParticleTransform into a LocalToParent using the internal data values Declaration public LocalToParent ToLocalToParent() Returns Type Description LocalToParent LocalToParent ToLocalToWorld() converts the ParticleTransform into a LocalToWorld using the internal data values Declaration public LocalToWorld ToLocalToWorld() Returns Type Description LocalToWorld LocalToWorld ToTransform(ParticleTransform) This creates a UnityEngine.Trasform from the PaticleTransform's data. Declaration public static Transform ToTransform(ParticleTransform particleTransform) Parameters Type Name Description ParticleTransform particleTransform ParticleTransform Returns Type Description Transform UpdateTransform(float3, float3, quaternion, quaternion, float3, Single, Int32) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(float3 position, float3 localPosition, quaternion rotation, quaternion localRotation, float3 localScale, float lossyScale, int childCount) Parameters Type Name Description float3 position [psotopm float3 localPosition ;pca; position quaternion rotation rotation quaternion localRotation local rotation float3 localScale local scale System.Single lossyScale lossy scale System.Int32 childCount amount of children the transform has UpdateTransform(float3, quaternion) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(float3 position, quaternion rotation) Parameters Type Name Description float3 position position quaternion rotation rotation UpdateTransform(LocalToWorld, float3, quaternion) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(LocalToWorld ltw, float3 localPosition, quaternion localRotation) Parameters Type Name Description LocalToWorld ltw Unity.Transforms.LocalToWorld float3 localPosition local postition quaternion localRotation local rotation UpdateTransform(LocalToWorld, Translation, Rotation) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(LocalToWorld ltw, Translation position, Rotation rotation) Parameters Type Name Description LocalToWorld ltw Unity.Transforms.LocalToWorld Translation position Unity.Transforms.Translation Rotation rotation Unity.Transforms.Rotation Implements IComponentData"
  },
  "api/DOTSDynamicBoneExtensions.DOTSDynamicBoneCollider.html": {
    "href": "api/DOTSDynamicBoneExtensions.DOTSDynamicBoneCollider.html",
    "title": "Class DOTSDynamicBoneCollider | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneCollider This is a collider for the DOTSDynamicBoneSystem Inheritance System.Object DOTSDynamicBoneCollider Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneCollider : MonoBehaviour Remarks This is a collider for the DOTSDynamicBoneSystem Fields enable Declaration public bool enable Field Value Type Description System.Boolean enables or disable the collider from collisions m_Bound Declaration public ParticleTransformExtensions.Bound m_Bound Field Value Type Description ParticleTransformExtensions.Bound type fo collision bound m_Center Declaration public float3 m_Center Field Value Type Description float3 center of the collider m_Direction Declaration public ParticleTransformExtensions.Direction m_Direction Field Value Type Description ParticleTransformExtensions.Direction The axis of the collider's height.n m_Height Declaration public float m_Height Field Value Type Description System.Single height of collider m_Radius Declaration public float m_Radius Field Value Type Description System.Single radius of collider Methods ToDOTSDynamicBoneCollider_BufferElement(GameObjectConversionSystem) Converts the collider into a DOTSDynamicBoneCollider_BufferElement Declaration public DOTSDynamicBoneCollider_BufferElement ToDOTSDynamicBoneCollider_BufferElement(GameObjectConversionSystem conversionSystem) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObjectConversion system Returns Type Description DOTSDynamicBoneCollider_BufferElement DOTSDynamicBoneCollider_BufferElement"
  },
  "api/DOTSDynamicBoneExtensions.DOTSDynamicBoneCollider_BufferElement.html": {
    "href": "api/DOTSDynamicBoneExtensions.DOTSDynamicBoneCollider_BufferElement.html",
    "title": "Struct DOTSDynamicBoneCollider_BufferElement | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneCollider_BufferElement This is a collider for the DOTSDynamicBoneSystem Implements IDOTSDynamicBoneCollider IBufferElementData Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneCollider_BufferElement : IDOTSDynamicBoneCollider, IBufferElementData Remarks This is a collider for the DOTSDynamicBoneSystem Fields boneEntity Declaration public Entity boneEntity Field Value Type Description Entity the bone entity associated with this collider enabled Declaration public bool enabled Field Value Type Description System.Boolean whether or not the collider is enabled. entity Declaration public Entity entity Field Value Type Description Entity the collider entity m_Height Declaration public float m_Height Field Value Type Description System.Single The height of the capsule. m_Radius Declaration public float m_Radius Field Value Type Description System.Single The radius of the sphere or capsule. transform Declaration public ParticleTransform transform Field Value Type Description ParticleTransform Properties m_Bound Declaration public ParticleTransformExtensions.Bound m_Bound { get; set; } Property Value Type Description ParticleTransformExtensions.Bound m_Center Declaration public float3 m_Center { get; set; } Property Value Type Description float3 m_Direction Declaration public ParticleTransformExtensions.Direction m_Direction { get; set; } Property Value Type Description ParticleTransformExtensions.Direction Null Declaration public static readonly DOTSDynamicBoneCollider_BufferElement Null { get; } Property Value Type Description DOTSDynamicBoneCollider_BufferElement A Null Collider Methods Collide(ref float3, Single) Tests for a collision Declaration public bool Collide(ref float3 particlePosition, float particleRadius) Parameters Type Name Description float3 particlePosition position System.Single particleRadius radius Returns Type Description System.Boolean Create(Entity, Entity, ParticleTransform) Creates a DOTSDynamicBoneCollider_BufferElement Declaration public DOTSDynamicBoneCollider_BufferElement Create(Entity boneEntity, Entity entity, ParticleTransform transform) Parameters Type Name Description Entity boneEntity entity representing the bone the collider will effect Entity entity the actual entity the bone is ParticleTransform transform is inital transform Returns Type Description DOTSDynamicBoneCollider_BufferElement UpdateTransform(float3, float3, quaternion, quaternion, float3, Single, Int32) Updates the internal ParticleTransform with the given data Declaration public void UpdateTransform(float3 position, float3 localPosition, quaternion rotation, quaternion localRotation, float3 localScale, float lossyScale, int childCount) Parameters Type Name Description float3 position position float3 localPosition local position quaternion rotation rotation quaternion localRotation local rotation float3 localScale local scale System.Single lossyScale lossy scale System.Int32 childCount amount of children of the transform UpdateTransform(float3, quaternion) Updates the internal ParticleTransform with the given data Declaration public void UpdateTransform(float3 position, quaternion rotation) Parameters Type Name Description float3 position position quaternion rotation Implements IDOTSDynamicBoneCollider IBufferElementData"
  },
  "api/DOTSDynamicBoneExtensions.html": {
    "href": "api/DOTSDynamicBoneExtensions.html",
    "title": "Namespace DOTSDynamicBoneExtensions | DOTS Dynamic Bone",
    "keywords": "Namespace DOTSDynamicBoneExtensions Classes DOTSDynamicBoneCollider This is a collider for the DOTSDynamicBoneSystem ParticleTransformExtensions Structs DOTSDynamicBoneCollider_BufferElement This is a collider for the DOTSDynamicBoneSystem Interfaces IDOTSDynamicBoneCollider Enums ParticleTransformExtensions.Bound ParticleTransformExtensions.Direction"
  },
  "api/DOTSDynamicBoneExtensions.IDOTSDynamicBoneCollider.html": {
    "href": "api/DOTSDynamicBoneExtensions.IDOTSDynamicBoneCollider.html",
    "title": "Interface IDOTSDynamicBoneCollider | DOTS Dynamic Bone",
    "keywords": "Interface IDOTSDynamicBoneCollider Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public interface IDOTSDynamicBoneCollider : IBufferElementData Properties m_Bound Declaration ParticleTransformExtensions.Bound m_Bound { get; set; } Property Value Type Description ParticleTransformExtensions.Bound Constrain bones to outside bound or inside bound m_Center Declaration float3 m_Center { get; set; } Property Value Type Description float3 The center of the sphere or capsule, in the object's local space. m_Direction Declaration ParticleTransformExtensions.Direction m_Direction { get; set; } Property Value Type Description ParticleTransformExtensions.Direction The axis of the capsule's height. Methods Collide(ref float3, Single) Declaration bool Collide(ref float3 particlePosition, float particleRadius) Parameters Type Name Description float3 particlePosition System.Single particleRadius Returns Type Description System.Boolean"
  },
  "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.Bound.html": {
    "href": "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.Bound.html",
    "title": "Enum ParticleTransformExtensions.Bound | DOTS Dynamic Bone",
    "keywords": "Enum ParticleTransformExtensions.Bound Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public enum Bound Fields Name Description Inside Outside"
  },
  "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.Direction.html": {
    "href": "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.Direction.html",
    "title": "Enum ParticleTransformExtensions.Direction | DOTS Dynamic Bone",
    "keywords": "Enum ParticleTransformExtensions.Direction Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public enum Direction Fields Name Description X Y Z"
  },
  "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.html": {
    "href": "api/DOTSDynamicBoneExtensions.ParticleTransformExtensions.html",
    "title": "Class ParticleTransformExtensions | DOTS Dynamic Bone",
    "keywords": "Class ParticleTransformExtensions Inheritance System.Object ParticleTransformExtensions Namespace : DOTSDynamicBoneExtensions Assembly : cs.temp.dll.dll Syntax public static class ParticleTransformExtensions"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | DOTS Dynamic Bone",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "manual/DOTSDynamicBone.Components.DOTSDynamicBoneComponent.html": {
    "href": "manual/DOTSDynamicBone.Components.DOTSDynamicBoneComponent.html",
    "title": "IndependantDOTSDynamicBone Component | DOTS Dynamic Bone",
    "keywords": "IndependantDOTSDynamicBone The IndependantDOTSDynamicBone is similar to the other 2 component except this can be placed anywhere on any entity. This however, comes with a slight performance hit since the relevant Job(s) need to get the data from the entities you want bones attached to."
  },
  "manual/DOTSDynamicBone.Components.DOTSDynamicBonesComponent.html": {
    "href": "manual/DOTSDynamicBone.Components.DOTSDynamicBonesComponent.html",
    "title": "DOTSDynamicBones Component | DOTS Dynamic Bone",
    "keywords": "DOTSDynamicBones Component The DOTSDynamicBonesComponent is the same as the DOTSDynamicBoneComponent except you can add multiple bons to a single Entity. This Component adds a DynmiacBuffer , DynamicBuffer , and a DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> (if colliders are added) to the entity during conversion. It is very important that you add this to the root GameObject that has a RigComponent attached to it as well. The parameters are the same so that's it!"
  },
  "manual/DOTSDynamicBone.Components.IndependantDOTSDynamicBone.html": {
    "href": "manual/DOTSDynamicBone.Components.IndependantDOTSDynamicBone.html",
    "title": "DOTSDynamicBone Component | DOTS Dynamic Bone",
    "keywords": "DOTSDynamicBone Component This Component adds a DOTSDynamicBone, DynamicBuffer , and a DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> (if colliders are added) to the entity during conversion. It is very important that you add this to the root GameObject that has a RigComponent attached to it as well. // put here or something Parameters The parameters for this are accessable from DOTSDynamicBoneClass . These parameters are used for the conversion and initialization process of DOTS Dynamic Bones. RigComponent Attach the RigComponent from the desired GameObject in here. remeber: The RigComponent should be in the location as DOTSDynamicBoneComponnet...maybe I should autodetect it? // insert image of RigComponent option here Name Ignore this, this is for the Editor during PlayMode. Rhis is not stored or used in any other way. //insert image of Name Disable Set this to true to disable to the bone during conversion. Due to the nature of how AnimatedLocalToRoot works, disbabling a bone or particle doesn't stop all the calculations. the Particles still need to be updated relative to thier parent so the only calculations that are disabled are the physics calculations. Note you can call Disable() on either a DOTSDynamicBone or a Particle anytime during runtime to disable it. Another Note: be sure to set the bone and/or particle after you make changes to it (remeber, no references allowed) Update Local To World Transforms Set this to true in order update the associated particle's entity with the ParticleTransform data. NOTE: this will execute adter ExportPhysicsWorld and will overwrite any collisions done to the Entity during that time step. This is subject to change Use Animated Local To Root Set this to true to convert the LocalToWorld calculations into AnimatedLocalToRoot values. This should be also set to true. Rig Component This is the RigComponent that comes with the Unity.Animation package. Simply add it to the Root GameObject, then drag it into the RigComponent field. This is Required Root Drag the Root GameObject in this field. This is required Update Rate This is the internal simulation rate. Update Mode Internal physics simulation type. Damping Distribution How much the bones slowed down over a distribution curve. Elasticity How much the force applied to return each bone to original orientation. Elasticity Distribution How much the force applied to return each bone to original orientation over a distribution curve. Stiffness How much bone's original orientation are preserved. Stiffness Distribution How much bone's original orientation are preserved over a distribution curve. Inert How much character's position change is ignored in physics simulation. Inert Distribution How much character's position change is ignored in physics simulation over a distribution curve. Friction How much the bones slowed down when collide. Friction Distribution How much the bones slowed down when collide over a distribution curve. Radius Each bone can be a sphere to collide with colliders. Radius describe sphere's size. Radius Distribution Each bone can be a sphere to collide with colliders. Radius describe sphere's size over a distribution curve. End Length If End Length is not zero, an extra bone is generated at the end of transform hierarchy. End Offset If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. Gravity The force apply to bones. Partial force apply to character's initial pose is cancelled out. Force The force apply to bones. Colliders Collider objects interact with the bones. Exclusions Bones excluded from physics simulation. Freeze Axis Constrain bones to move on specified plane. Distant Disable Disable physics simulation automatically if Entity is far from the m_ReferencedObject Entity. Reference Object Entity to be referenced for m_DistantDisable Distance To Object Distnace the Entity has to be from the referenced Entity"
  },
  "manual/DOTSDynamicBone.Concepts.Bones.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Bones.html",
    "title": "Bones | DOTS Dynamic Bone",
    "keywords": "Bones A Bone is a data structure that holds all data relevant to the Particles and Colliders associated with that Bone . Each Bone should have a specific set of Particles associated with it and whose Particles should not overlay with any other Bone . If a Bone addresses Particles that are addressed by another Bone unexpected behavoir is expected to happen. There are 2 types of Bones that the system contains. They are: DOTSDynamicBone: A data structure used when only 1 Bone is added to an Entity. DOTSDynamicBone_BufferElement: a data structure used when multiple bones are added to an Entity. The reason of having 2 was simply to save space on an Entity and to prevent unessacary allocation or data. However, this does mean that 2 Jobs are required to handle each Bone type but each job can Use Burst and ScheduleParallel. Bone data is referenced and used throughout the calculations done on Particles so if you want to change all the Particles in one go then you want to change the Bone data."
  },
  "manual/DOTSDynamicBone.Concepts.General.html": {
    "href": "manual/DOTSDynamicBone.Concepts.General.html",
    "title": "General Concepts | DOTS Dynamic Bone",
    "keywords": "General Overview DOTS Dynamic Bone is broken up into 2 Systems, 7 Jobs, and 3 main components. The purpose of DOTS Dynamic Bone is to perform physics simulations on components within your model. You can use this to perform simulations on cloths, hair, rope, etc. Using the benefits of Unity DOTS & ECS, a system was created to perform these calculations efficently with minimal performance hits in your Game/Application. Components DOTS Dynamic Bone contains 3 main component types (See the Components tab for more information: Bone Particle Collider DOTS Dynamic Bone contains 2 systems (Check the Systems tab for more information): DynamicBoneUpdateSystem DynamicBonePhysicsSystem DOTS Dynamic Bone performs 7 jobs that updates data based on the Components in the Entity. (Check the Jobs tab for more information) These Jobs include: DOTSDynamicBone_ParticleLocalToWorldOverride DOTSDynamicBone IndependantDOTSDynamicBone DOTSDynamicBoneMultiple DOTSDynamicBoneMultipleWithColliders DOTSDynamicBoneWithColliders IndependantDOTSDynamicBoneWithColliders"
  },
  "manual/DOTSDynamicBone.Concepts.Jobs.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Jobs.html",
    "title": "Jobs | DOTS Dynamic Bone",
    "keywords": "Jobs DOTS Dynamic Bone currently runs 7 total jobs. These jobs include: DOTSDynamicBone_ParticleLocalToWorldOverride DOTSDynamicBone IndependantDOTSDynamicBone DOTSDynamicBoneMultiple DOTSDynamicBoneMultipleWithColliders DOTSDynamicBoneWithColliders IndependantDOTSDynamicBoneWithColliders The reason for this is because each job's performance is maximized for the specific job they do. For example, the IndependatDOTSDynamicBone job speciically only affects entities who has a tag of IndependatDOTSDynamicBone_Tag. Now you may be wondering, \"What's the point of Jobs like DOTSDynamicBones if I can have multiple IndependantDOTSDynamicBones that do the same thing?\". The simple answer for this is data access time. IndependantDOTSDynamicBone relies on updating some of its data using the ComponentDataFromEntity call. Though 10 or 100 calls may not be noticable, it's important to consider the cases with n calls. comapring the extra n calls of IndependantDOTSDynamicBone compared to the 0 calls (the data is already there) of DOTSDynamicBoneMultiple made it worth the effort of creating a specific Job for each. Of course, this only applies if your adding multiple bones to the same Entity. remember you should only use DOTSDynamicBonesComponent on the Entity you want multiple bones to be added to Now to go over the different jobs and thier specific roles Note: they all perform updates to the DynamicBuffer expect DOTSDynamicBone_ParticleLocalToWorldOverride DOTSDynamicBone Job This Job updates all entities matching the below criteria. Entities .WithName(\"DOTSDynamicBone\") .WithNone<DOTSDynamicBoneCollider_BufferElement>()//<- notice we don't want colliders here to reduce checks, calls, and buffer allocation .WithBurst() .ForEach((ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, in LocalToWorld coreLTW, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { ... }) .ScheduleParallel(); DOTSDynamicBoneMultiple Job This Job updates all entities matching the below criteria. Entities .WithName(\"DOTSDynamicBoneMultiple\") .WithNone<DOTSDynamicBoneCollider_BufferElement>() //<- notice we don't want colliders here to reduce checks, calls, and buffer allocation .WithBurst() .ForEach((ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, ref LocalToWorld coreLTW, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { ... }) .ScheduleParallel(); IndependantDOTSDynamicBone Job This Job updates all entities matching the below criteria. var GetLTW = GetComponentDataFromEntity<LocalToWorld>(); var GetAnimatedLocalToWorld = GetBufferFromEntity<Unity.Animation.AnimatedLocalToWorld>(true); var GetAnimatedLocalToRoot = GetBufferFromEntity<Unity.Animation.AnimatedLocalToRoot>(); Entities .WithName(\"IndependantDOTSDynamicBone\") .WithNone<DOTSDynamicBoneCollider_BufferElement>() .WithBurst() .WithReadOnly(GetLTW) .WithReadOnly(GetAnimatedLocalToWorld) .ForEach((ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles) => { //notice the extra data I have to aquire seperate from what's already provided...maybe a Archtype job can speed this up? DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr = GetAnimatedLocalToRoot[bone.m_RigComponentEntity]; DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw = GetAnimatedLocalToWorld[bone.m_RigComponentEntity]; LocalToWorld coreLTW = GetLTW[bone.m_RigComponentEntity]; ... }) .Schedule(); DOTSDynamicBoneWithColliders Job Does the same as DOTSDynamicBone except the collider buffer is added. Entities .WithName(\"DOTSDynamicBoneWithColliders\") .WithBurst() .WithReadOnly(GetLTW) .ForEach((Entity e, ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { for (int i = 0; i < m_Colliders.Length; i++) { var c = m_Colliders[i]; if (c.entity.Equals(Entity.Null)) Debug.LogWarning(\"COLLIDER HAS A NULL ENTITY\"); //<- if you don't want this, let me know but it's hard to track otherwise else { LocalToWorld cltw = GetLTW[c.entity]; c.UpdateTransform(cltw.Position, cltw.Rotation); } } ... }) .ScheduleParallel(); DOTSDynamicBoneMultipleWithColliders Job Does the same as DOTSDynamicBoneMultiple except the collider buffer is added. Entities .WithName(\"DOTSDynamicBoneMultipleWithColliders\") .WithBurst() .WithReadOnly(GetLTW) .ForEach((Entity entity, ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { // jeez, we are dealing with 5 buffers here for (int i = 0; i < m_Colliders.Length; i++) { var c = m_Colliders[i]; if (c.entity.Equals(Entity.Null)) Debug.LogWarning(\"COLLIDER HAS A NULL ENTITY\"); else { LocalToWorld cltw = GetLTW[c.entity]; c.UpdateTransform(cltw.Position, cltw.Rotation); } } ... }) .ScheduleParallel(); IndependantDOTSDynamicBoneWithColliders Job Does the same as IndependantDOTSDynamicBone except the collider buffer is added. Entities .WithName(\"IndependantDOTSDynamicBoneWithColliders\") .WithBurst() .WithReadOnly(GetLTW) .WithReadOnly(GetAnimatedLocalToWorld) .ForEach((ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders) => { DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr = GetAnimatedLocalToRoot[bone.m_RigComponentEntity]; DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw = GetAnimatedLocalToWorld[bone.m_RigComponentEntity]; LocalToWorld coreLTW = GetLTW[bone.m_RigComponentEntity]; for (int i = 0; i < m_Colliders.Length; i++) { var c = m_Colliders[i]; if (c.entity.Equals(Entity.Null)) Debug.LogWarning(\"COLLIDER HAS A NULL ENTITY\"); else { LocalToWorld cltw = GetLTW[c.entity]; c.UpdateTransform(cltw.Position, cltw.Rotation); } } ... }) .Schedule(); Remarks It it important to remeber that the Jobs and systems are subject to change so if you have any comments or suggestions, please let me know at link"
  },
  "manual/DOTSDynamicBone.Concepts.Particles.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Particles.html",
    "title": "Particles | DOTS Dynamic Bone",
    "keywords": "Particles Particles are the induvidual components that are modified during the physics simulation. Particles can represent different things like bones, segmenta, or divisions within a model. During each update, data from the associated bone is used with the particles to perform a physics simulation step. After the step is complete all the Particles will be updated with new positions and rotations."
  },
  "manual/DOTSDynamicBone.Concepts.Systems.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Systems.html",
    "title": "Systems | DOTS Dynamic Bone",
    "keywords": "Systems There are 2 Systems associated with DOTS Dynamic Bone. DOTSDYnamicBoneUpdateSystem The DOTSDynamicBoneUpdateSystem is currently responsible for the physics simulation update and the AnimatedLocalToRoot update. DOTSDynamicBonePhysicsSystem The DOTSDynamicBonePhysicsSystem is currently only responsible for updating LocalToWorld transforms of bones/particles with that setting turned on. NOTE: I plan on doing some restructure when the new physics system is developed"
  },
  "manual/DOTSDynamicBone.ProjectSetup.html": {
    "href": "manual/DOTSDynamicBone.ProjectSetup.html",
    "title": "Project Setup | DOTS Dynamic Bone",
    "keywords": "Prerequisites NOTE: THIS WILL NOT WORK IN A NON-DOTS/ECS ENVIROMENT. YOU MUST BE WORKING IN UNITY DOTS & ECS Before you setup DOTS Dynamic Bone it is important that you import the following unity packages from the Package Manager (Note: links may not always send you to the latest version): Unity.Animation v0.9.0-preview.6 Unity.Entities v0.17.0-preview.42 Unity.Physics v0.6.0-preview.3 Unity.Rendering.Hybrid v0.11.0-preview.44 Either the Universal Render Pipeline and/or High Definition Render Pipeline . Setup To setup your project with DOTS Dynamic Bone you will have to place DOTSDynamicBone.dll and EggExtensions.dll into your Plugins folder within your asset folder. ProjectName/Assets/Plugins/DOTSDynamicBone.dll ProjectName/Assets/Plugins/EggExtensions.dll That's it!"
  }
}