{
  "api/DOTSDynamicBone.Collision.DOTSDynamicBoneCollider.html": {
    "href": "api/DOTSDynamicBone.Collision.DOTSDynamicBoneCollider.html",
    "title": "Class DOTSDynamicBoneCollider | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneCollider This is a Preset collider for the DOTSDynamicBoneCollisionSystem Inheritance System.Object DOTSDynamicBoneCollider Namespace : DOTSDynamicBone.Collision Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneCollider : MonoBehaviour Remarks This is a Preset collider for the DOTSDynamicBoneCollisionSystem Fields Enable Declaration public bool Enable Field Value Type Description System.Boolean This represents the type of collider the DOTS Dynamic Collider represents FallbackToParicleRadiusOnNullPhysicsCollider Declaration public bool FallbackToParicleRadiusOnNullPhysicsCollider Field Value Type Description System.Boolean m_Bound Declaration public TransformsExtensions.Bound m_Bound Field Value Type Description TransformsExtensions.Bound m_Center Declaration public float3 m_Center Field Value Type Description float3 m_Direction Declaration public TransformsExtensions.Direction m_Direction Field Value Type Description TransformsExtensions.Direction m_Height Declaration public float m_Height Field Value Type Description System.Single m_Radius Declaration public float m_Radius Field Value Type Description System.Single Persistant Declaration public bool Persistant Field Value Type Description System.Boolean UseParticlePhysicsCollider Declaration public bool UseParticlePhysicsCollider Field Value Type Description System.Boolean UseUnityPhysicsCollider Declaration public bool UseUnityPhysicsCollider Field Value Type Description System.Boolean Methods HasPhysicsShape() Declaration public bool HasPhysicsShape() Returns Type Description System.Boolean ToDOTSDynamicBoneCollider_BufferElement(GameObjectConversionSystem, Transform, Boolean) Converts the collider into a DOTSDynamicBoneCollider_BufferElement Declaration public DOTSDynamicBoneCollider_BufferElement ToDOTSDynamicBoneCollider_BufferElement(GameObjectConversionSystem conversionSystem, Transform BoneRoot, bool IsCollided = false) Parameters Type Name Description GameObjectConversionSystem conversionSystem GameObjectConversion system Transform BoneRoot System.Boolean IsCollided Returns Type Description DOTSDynamicBoneCollider_BufferElement DOTSDynamicBoneCollider_BufferElement"
  },
  "api/DOTSDynamicBone.Collision.DOTSDynamicBoneCollider_BufferElement.html": {
    "href": "api/DOTSDynamicBone.Collision.DOTSDynamicBoneCollider_BufferElement.html",
    "title": "Struct DOTSDynamicBoneCollider_BufferElement | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneCollider_BufferElement This is a collider for the DOTSDynamicBoneSystem Implements IDOTSDynamicBoneCollider IBufferElementData Namespace : DOTSDynamicBone.Collision Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneCollider_BufferElement : IDOTSDynamicBoneCollider, IBufferElementData Remarks This is a collider for the DOTSDynamicBoneSystem Fields aabb Declaration public Aabb aabb Field Value Type Description Aabb boneEntity Declaration public Entity boneEntity Field Value Type Description Entity the bone entity associated with this collider collider Declaration public Unity.Physics.PhysicsCollider collider Field Value Type Description Unity.Physics.PhysicsCollider Collider associated with the particle collisionEvent Declaration public AColliderCollisionEvent collisionEvent Field Value Type Description AColliderCollisionEvent AColliderProperties generated with DOTS Dynamic Bone with PhysicsShape enabled Declaration public bool enabled Field Value Type Description System.Boolean whether or not the collider is enabled. entity Declaration public Entity entity Field Value Type Description Entity the collider entity fallbackToParicleRadiusOnNullPhysicsCollider Declaration public bool fallbackToParicleRadiusOnNullPhysicsCollider Field Value Type Description System.Boolean set to true to use the Particle's m_Radius to perform collisions when the Particle's PhysicsCollider is null and UseParticlePhysicsCollider is true IsCollided Declaration public bool IsCollided Field Value Type Description System.Boolean set this to true to have this collider always return true m_Height Declaration public float m_Height Field Value Type Description System.Single The height of the capsule. m_Radius Declaration public float m_Radius Field Value Type Description System.Single The radius of the sphere or capsule. persistant Declaration public bool persistant Field Value Type Description System.Boolean set this to true to prevent the removal of this collider from the DynamicBuffer at the end of the frame transform Declaration public ParticleTransform transform Field Value Type Description ParticleTransform the entity's Transform useParticlePhysicsCollider Declaration public bool useParticlePhysicsCollider Field Value Type Description System.Boolean set to true to use the Unity.Physics.PhysicsCollider data stored within a Particle useUnityPhysicsCollider Declaration public bool useUnityPhysicsCollider Field Value Type Description System.Boolean Set this to true to use the Unity.Physics.Collider in stead of the inernally stored values Properties m_Bound Declaration public TransformsExtensions.Bound m_Bound { get; set; } Property Value Type Description TransformsExtensions.Bound the collider collision bound type m_Center Declaration public float3 m_Center { get; set; } Property Value Type Description float3 the collision center m_Direction Declaration public TransformsExtensions.Direction m_Direction { get; set; } Property Value Type Description TransformsExtensions.Direction The axis of the collider's height. Null Declaration public static readonly DOTSDynamicBoneCollider_BufferElement Null { get; } Property Value Type Description DOTSDynamicBoneCollider_BufferElement A Null Collider Methods Collide(ref float3, Single) Tests for a collision Declaration public bool Collide(ref float3 particlePosition, float particleRadius) Parameters Type Name Description float3 particlePosition position System.Single particleRadius radius Returns Type Description System.Boolean Implements IDOTSDynamicBoneCollider IBufferElementData"
  },
  "api/DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag.html": {
    "href": "api/DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag.html",
    "title": "Struct DOTSDynamicBoneNaturalCollider_Tag | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneNaturalCollider_Tag Implements IComponentData Namespace : DOTSDynamicBone.Collision Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneNaturalCollider_Tag : IComponentData Fields RigComponentEntity Declaration public Entity RigComponentEntity Field Value Type Description Entity Entity that contains the RigComponent that this tag is linked to Methods Create(Entity) Declaration public static DOTSDynamicBoneNaturalCollider_Tag Create(Entity RigComponentEntity) Parameters Type Name Description Entity RigComponentEntity Returns Type Description DOTSDynamicBoneNaturalCollider_Tag Implements IComponentData"
  },
  "api/DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalColliderComponent.html": {
    "href": "api/DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalColliderComponent.html",
    "title": "Class DOTSDynamicBoneNaturalColliderComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneNaturalColliderComponent adds a DOTSDynamicBoneNaturalCollider_Tag to an Entity Inheritance System.Object DOTSDynamicBoneNaturalColliderComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone.Collision Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneNaturalColliderComponent : MonoBehaviour, IConvertGameObjectToEntity Remarks This This component isn't used anuymore since the removal of the old Collision V1 system Fields rigComponent Declaration public RigComponent rigComponent Field Value Type Description RigComponent RigComponent Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.Collision.html": {
    "href": "api/DOTSDynamicBone.Collision.html",
    "title": "Namespace DOTSDynamicBone.Collision | DOTS Dynamic Bone",
    "keywords": "Namespace DOTSDynamicBone.Collision Classes DOTSDynamicBoneCollider This is a Preset collider for the DOTSDynamicBoneCollisionSystem DOTSDynamicBoneNaturalColliderComponent adds a DOTSDynamicBoneNaturalCollider_Tag to an Entity Structs DOTSDynamicBoneCollider_BufferElement This is a collider for the DOTSDynamicBoneSystem DOTSDynamicBoneNaturalCollider_Tag Interfaces IDOTSDynamicBoneCollider"
  },
  "api/DOTSDynamicBone.Collision.IDOTSDynamicBoneCollider.html": {
    "href": "api/DOTSDynamicBone.Collision.IDOTSDynamicBoneCollider.html",
    "title": "Interface IDOTSDynamicBoneCollider | DOTS Dynamic Bone",
    "keywords": "Interface IDOTSDynamicBoneCollider Namespace : DOTSDynamicBone.Collision Assembly : cs.temp.dll.dll Syntax public interface IDOTSDynamicBoneCollider : IBufferElementData Properties m_Bound Declaration TransformsExtensions.Bound m_Bound { get; set; } Property Value Type Description TransformsExtensions.Bound Constrain bones to outside bound or inside bound m_Center Declaration float3 m_Center { get; set; } Property Value Type Description float3 The center of the sphere or capsule, in the object's local space. m_Direction Declaration TransformsExtensions.Direction m_Direction { get; set; } Property Value Type Description TransformsExtensions.Direction The axis of the capsule's height. Methods Collide(ref float3, Single) Declaration bool Collide(ref float3 particlePosition, float particleRadius) Parameters Type Name Description float3 particlePosition System.Single particleRadius Returns Type Description System.Boolean"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone.FreezeAxis.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.FreezeAxis.html",
    "title": "Enum DOTSDynamicBone.FreezeAxis | DOTS Dynamic Bone",
    "keywords": "Enum DOTSDynamicBone.FreezeAxis Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum FreezeAxis Fields Name Description None X Y Z"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.html",
    "title": "Struct DOTSDynamicBone | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBone This is a DOTSDynamicBone. This struct holds data used for calculations Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct DOTSDynamicBone : IComponentData Remarks This is a DOTSDynamicBone. This struct holds data used for calculations Fields Disabled Set this to true to disable calculations on the bone Declaration public bool Disabled Field Value Type Description System.Boolean set to true to disable all particle calculations within the bone set m_BoneTotalLength Declaration public float m_BoneTotalLength Field Value Type Description System.Single total length of the bone m_Core Declaration public ParticleTransform m_Core Field Value Type Description ParticleTransform This is a ParticleTransform that stores the data related to the m_RigComponentEntity Transform m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the bones slowed down. m_DistanceToObject Declaration public float m_DistanceToObject Field Value Type Description System.Single how far the Referenced Entity has to be in order for m_DistantDisable to be true m_DistantDisable Declaration public bool m_DistantDisable Field Value Type Description System.Boolean Disable physics simulation automatically if the entity is far from a specified Entity. m_DistantDisabled Declaration public bool m_DistantDisabled Field Value Type Description System.Boolean if true then physics calculations have been disabled on this bone. m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each bone to original orientation. m_EndLength Declaration public float m_EndLength Field Value Type Description System.Single If End Length is not zero, an extra bone is generated at the end of transform hierarchy. m_EndOffset Declaration public float3 m_EndOffset Field Value Type Description float3 If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. m_Force Declaration public float3 m_Force Field Value Type Description float3 The force apply to bones. m_FreezeAxis Declaration public DOTSDynamicBone.FreezeAxis m_FreezeAxis Field Value Type Description DOTSDynamicBone.FreezeAxis Constrain bones to move on specified plane. m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the bones slowed down when collide. m_Gravity Declaration public float3 m_Gravity Field Value Type Description float3 The force apply to bones. Partial force apply to character's initial pose is cancelled out. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much character's position change is ignored in physics simulation. m_LocalGravity Declaration public float3 m_LocalGravity Field Value Type Description float3 local gravity of the bone m_MaxRestLength Declaration public float m_MaxRestLength Field Value Type Description System.Single NOT IMPLMENTED, TODO: determine if I want to implement this... m_ParentAnimatedLocalToRootIndex Declaration public int m_ParentAnimatedLocalToRootIndex Field Value Type Description System.Int32 This is the Root DynamicBone Particle's parent index in the AnimatedLocalToRoot DynamicBuffer m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each bone can be a sphere to collide with colliders. Radius describe sphere's size. m_ReferenceObject Declaration public ParticleTransform m_ReferenceObject Field Value Type Description ParticleTransform A PArticleTransform that represents the ReferendEntity's Transform m_ReferenceObjectEntity Declaration public Entity m_ReferenceObjectEntity Field Value Type Description Entity The Entity to use in the DistantDisable determination m_RigComponentEntity Declaration public Entity m_RigComponentEntity Field Value Type Description Entity This is the entity Entity that contained the RigComponent. Most likely this will be the same as the m_RootEntity m_RootAnimatedLocalToRootIndex Declaration public int m_RootAnimatedLocalToRootIndex Field Value Type Description System.Int32 This is the index that the Root Entity's AnimatedLocalToRootIndex index. This will always most likly be 0 since it is the root m_RootEntity Declaration public Entity m_RootEntity Field Value Type Description Entity This is the Entity if the root transform (not to be confused with the RootBone Entity) m_RootParentEntity Declaration public Entity m_RootParentEntity Field Value Type Description Entity The root DynamicBone has a parent, and this Entity is that parent. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much bone's original orientation are preserved. m_UpdateDataFrom Declaration public DOTSDynamicBoneClass.UpdateDataFrom m_UpdateDataFrom Field Value Type Description DOTSDynamicBoneClass.UpdateDataFrom An option to choose where the data updates from. This was implemented m_UpdateMode Declaration public DOTSDynamicBone.UpdateMode m_UpdateMode Field Value Type Description DOTSDynamicBone.UpdateMode Internal physics simulation mode. m_UpdateRate Declaration public float m_UpdateRate Field Value Type Description System.Single Internal physics simulation rate. m_Weight Declaration public float m_Weight Field Value Type Description System.Single weight of bone. UpdateLocalToWorldTransforms Declaration public bool UpdateLocalToWorldTransforms Field Value Type Description System.Boolean this lets you know if the bone has given the DOTSDynamicBoneParticleLocalToWorldOverride_Tag tag. It currently has no other use but will be given one later UpdateRotationTransforms Declaration public bool UpdateRotationTransforms Field Value Type Description System.Boolean this lets you know if the bone has given the DOTSDynamicBoneParticleLocalToWorldOverride_Tag tag. It currently has no other use but will be given one later UpdateTranslationTransforms Declaration public bool UpdateTranslationTransforms Field Value Type Description System.Boolean this lets you know if the bone has given the DOTSDynamicBoneParticleLocalToWorldOverride_Tag tag. It currently has no other use but will be given one later UseAnimatedLocalToRoot Declaration public bool UseAnimatedLocalToRoot Field Value Type Description System.Boolean set this to true to have all calculated values be converted into AnimatedLocalToRootValues (required for it to not look weird, but disable it if you want, it's your game) UseNaturalColliders Declaration public bool UseNaturalColliders Field Value Type Description System.Boolean Methods Create(GameObjectConversionSystem, RigComponent, Transform, DOTSDynamicBoneClass, Single) V0.8.3+ Creates a DOTSDynamicBone using the given information Declaration public static DOTSDynamicBone Create(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, DOTSDynamicBoneClass boneComponent, float maxRestLength = 0.2F) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem GameObjectConversionSystem RigComponent RigComponent RigComponent Transform Root Root Transform DOTSDynamicBoneClass boneComponent DOTSDynamicBoneClass System.Single maxRestLength NOT IMPLEMENTED Returns Type Description DOTSDynamicBone DOTSDynamicBone Disable(ref Particle[], Int32, Int32) Disables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Disable(ref Particle[] m_Particles, int start, int end) Parameters Type Name Description Particle [] m_Particles particles to be disabled System.Int32 start System.Int32 end Disable(ref DynamicBuffer<Particle>, Int32, Int32) Disables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Disable(ref DynamicBuffer<Particle> m_Particles, int start, int end) Parameters Type Name Description DynamicBuffer < Particle > m_Particles particles to be disabled System.Int32 start System.Int32 end Disable(ref List<Particle>, Int32, Int32) Disables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Disable(ref List<Particle> m_Particles, int start, int end) Parameters Type Name Description List < Particle > m_Particles particles to be disabled System.Int32 start System.Int32 end Enable(ref Particle[], Int32, Int32) Enables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Enable(ref Particle[] m_Particles, int start, int end) Parameters Type Name Description Particle [] m_Particles particles to be enabled System.Int32 start System.Int32 end Enable(ref DynamicBuffer<Particle>, Int32, Int32) Enables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Enable(ref DynamicBuffer<Particle> m_Particles, int start, int end) Parameters Type Name Description DynamicBuffer < Particle > m_Particles particles to be enabled System.Int32 start System.Int32 end Enable(ref List<Particle>, Int32, Int32) Enables the bone and all the given Particles. (NOTE: the particles should be associated with the bones) Declaration public void Enable(ref List<Particle> m_Particles, int start, int end) Parameters Type Name Description List < Particle > m_Particles particles to be enabled System.Int32 start System.Int32 end Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone.UpdateMode.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone.UpdateMode.html",
    "title": "Enum DOTSDynamicBone.UpdateMode | DOTS Dynamic Bone",
    "keywords": "Enum DOTSDynamicBone.UpdateMode Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum UpdateMode Fields Name Description AnimatePhysics Default Normal UnscaledTime"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone_BufferElement.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone_BufferElement.html",
    "title": "Struct DOTSDynamicBone_BufferElement | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBone_BufferElement This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer Implements IBufferElementData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct DOTSDynamicBone_BufferElement : IBufferElementData Remarks This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer Fields end Declaration public int end Field Value Type Description System.Int32 end index in a Particle DynamicBuffer start Declaration public int start Field Value Type Description System.Int32 start index in a Particle DynamicBuffer Value Declaration public DOTSDynamicBone Value Field Value Type Description DOTSDynamicBone A DOTSDynamicBone Implements IBufferElementData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBone_TransformOverrideLink_Tag.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBone_TransformOverrideLink_Tag.html",
    "title": "Struct DOTSDynamicBone_TransformOverrideLink_Tag | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBone_TransformOverrideLink_Tag Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBone_TransformOverrideLink_Tag : IComponentData Fields boneIndex Declaration public int boneIndex Field Value Type Description System.Int32 DOTSDynamicBoneEntity Declaration public Entity DOTSDynamicBoneEntity Field Value Type Description Entity particleIndex Declaration public int particleIndex Field Value Type Description System.Int32 singleBone Declaration public bool singleBone Field Value Type Description System.Boolean Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneClass.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneClass.html",
    "title": "Class DOTSDynamicBoneClass | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneClass This holds and displays all the data needs to modify to create the DOTSDynamicBone data Inheritance System.Object DOTSDynamicBoneClass Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public class DOTSDynamicBoneClass Remarks This holds and displays all the data needs to modify to create the DOTSDynamicBone data Constructors DOTSDynamicBoneClass() Declaration public DOTSDynamicBoneClass() Fields Disable Declaration public bool Disable Field Value Type Description System.Boolean Set to true to disable the calculations done on the the bones Particles m_BoneTotalLength Declaration public float m_BoneTotalLength Field Value Type Description System.Single m_Colliders Declaration public List<DOTSDynamicBoneCollider> m_Colliders Field Value Type Description List < DOTSDynamicBoneCollider > Collider objects interact with the bones. m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the bones slowed down. m_DampingDistrib Declaration public AnimationCurve m_DampingDistrib Field Value Type Description AnimationCurve How much the bones slowed down over a distribution curve. m_DistanceToObject Declaration public float m_DistanceToObject Field Value Type Description System.Single distnace the Entity has to be from the referenced Entity m_DistantDisable Declaration public bool m_DistantDisable Field Value Type Description System.Boolean Disable physics simulation automatically if Entity is far from the m_ReferencedObject Entity. m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each bone to original orientation. m_ElasticityDistrib Declaration public AnimationCurve m_ElasticityDistrib Field Value Type Description AnimationCurve How much the force applied to return each bone to original orientation over a distribution curve. m_EndLength Declaration public float m_EndLength Field Value Type Description System.Single If End Length is not zero, an extra bone is generated at the end of transform hierarchy. m_EndOffset Declaration public Vector3 m_EndOffset Field Value Type Description Vector3 If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. m_Exclusions Declaration public List<ExcludeEntityFromSimulation> m_Exclusions Field Value Type Description List < ExcludeEntityFromSimulation > Bones excluded from physics simulation. m_Force Declaration public Vector3 m_Force Field Value Type Description Vector3 The force apply to bones. m_FreezeAxis Declaration public DOTSDynamicBone.FreezeAxis m_FreezeAxis Field Value Type Description DOTSDynamicBone.FreezeAxis Constrain bones to move on specified plane. m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the bones slowed down when collide. m_FrictionDistrib Declaration public AnimationCurve m_FrictionDistrib Field Value Type Description AnimationCurve How much the bones slowed down when collide over a distribution curve. m_Gravity Declaration public Vector3 m_Gravity Field Value Type Description Vector3 The force apply to bones. Partial force apply to character's initial pose is cancelled out. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much character's position change is ignored in physics simulation. m_InertDistrib Declaration public AnimationCurve m_InertDistrib Field Value Type Description AnimationCurve How much character's position change is ignored in physics simulation over a distribution curve. m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each bone can be a sphere to collide with colliders. Radius describe sphere's size. m_RadiusDistrib Declaration public AnimationCurve m_RadiusDistrib Field Value Type Description AnimationCurve Each bone can be a sphere to collide with colliders. Radius describe sphere's size over a distribution curve. m_ReferenceObject Declaration public Transform m_ReferenceObject Field Value Type Description Transform Entity to be referenced for m_DistantDisable m_Root Declaration public Transform m_Root Field Value Type Description Transform The root of the transform hierarchy to apply physics. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much bone's original orientation are preserved. m_StiffnessDistrib Declaration public AnimationCurve m_StiffnessDistrib Field Value Type Description AnimationCurve How much bone's original orientation are preserved over a distribution curve. m_UpdateDataFrom Declaration public DOTSDynamicBoneClass.UpdateDataFrom m_UpdateDataFrom Field Value Type Description DOTSDynamicBoneClass.UpdateDataFrom An option to choose where the data updates from. m_UpdateMode Declaration public DOTSDynamicBone.UpdateMode m_UpdateMode Field Value Type Description DOTSDynamicBone.UpdateMode Internal physics simulation type. m_UpdateRate Declaration public float m_UpdateRate Field Value Type Description System.Single Internal physics simulation rate. m_Weight Declaration public float m_Weight Field Value Type Description System.Single Name Declaration public string Name Field Value Type Description System.String Just The name of the root bone (so you can see it in the editor easier, changing it won't break anything but may confuse you RigComponent Declaration public RigComponent RigComponent Field Value Type Description RigComponent This should be the GameObject this script is attached to UpdateLocalToWorldTransforms Declaration public bool UpdateLocalToWorldTransforms Field Value Type Description System.Boolean Set to true to update the LocalToWorld of the Particle's Corresponding Entity UpdateRotationTransforms Declaration public bool UpdateRotationTransforms Field Value Type Description System.Boolean Set to true to update the Rotation of the Particle's Corresponding Entity UpdateTranslationTransforms Declaration public bool UpdateTranslationTransforms Field Value Type Description System.Boolean Set to true to update the Translation of the Particle's Corresponding Entity UseAnimatedLocalToRoot Declaration public bool UseAnimatedLocalToRoot Field Value Type Description System.Boolean Set to true if the entity is Animated using th Unity.Animations Package UseNaturalColliders Declaration public bool UseNaturalColliders Field Value Type Description System.Boolean Set this to true to use enable DOTS PhysicCollider collisions. Methods AddDOTSDynamicBoneCalculationCulling(EntityManager, Entity, ref DOTSDynamicBone, Entity, Single) Declaration public static void AddDOTSDynamicBoneCalculationCulling(EntityManager em, Entity e, ref DOTSDynamicBone bone, Entity reference_entity, float distance) Parameters Type Name Description EntityManager em Entity e DOTSDynamicBone bone Entity reference_entity System.Single distance AddDOTSDynamicBoneColliderComponentsToEntity(EntityManager, Entity, Boolean, Boolean) adds some DynamicBoneColliderComponents to the given entity Declaration public static void AddDOTSDynamicBoneColliderComponentsToEntity(EntityManager em, Entity e, bool useNaturalColliders, bool excludePhysics) Parameters Type Name Description EntityManager em EntityManager Entity e Entity System.Boolean useNaturalColliders System.Boolean excludePhysics RemoveDOTSDynamicBoneCalculationCulling(EntityManager, Entity) Declaration public static void RemoveDOTSDynamicBoneCalculationCulling(EntityManager em, Entity e) Parameters Type Name Description EntityManager em Entity e RemoveDOTSDynamicBoneCalculationCulling(EntityManager, Entity, ref DOTSDynamicBone) Declaration public static void RemoveDOTSDynamicBoneCalculationCulling(EntityManager em, Entity e, ref DOTSDynamicBone bone) Parameters Type Name Description EntityManager em Entity e DOTSDynamicBone bone RemoveDOTSDynamicBoneNaturalColliderComponentsFromEntity(EntityManager, Entity) Declaration public static void RemoveDOTSDynamicBoneNaturalColliderComponentsFromEntity(EntityManager em, Entity e) Parameters Type Name Description EntityManager em Entity e SetDOTSDynamicBoneCalculationCulling(ref DOTSDynamicBone, Entity, Single, Boolean) Declaration public static void SetDOTSDynamicBoneCalculationCulling(ref DOTSDynamicBone bone, Entity reference_entity, float distance, bool ActivateCulling = true) Parameters Type Name Description DOTSDynamicBone bone Entity reference_entity System.Single distance System.Boolean ActivateCulling ToDOTSDynamicBone(GameObjectConversionSystem, RigComponent, Transform, EntityManager, Entity, DOTSDynamicBoneClass) Creates a valid DOTSDynamicBone Declaration public DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, EntityManager dstManager, Entity rootEntity, DOTSDynamicBoneClass boneComponent) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem Provided GameObjectConversionSystem RigComponent RigComponent RigComponent to be used on the conversion Transform Root The Root GameObject with the RigComponent EntityManager dstManager EntityManager Entity rootEntity Entity where the root DOTSDynamicBone will affect DOTSDynamicBoneClass boneComponent Bone related data Returns Type Description DOTSDynamicBone DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem, RigComponent, Transform, EntityManager, Entity, DOTSDynamicBoneClass, ref DynamicBuffer<Particle>) Creates a valid DOTSDynamicBone Declaration public DOTSDynamicBone ToDOTSDynamicBone(GameObjectConversionSystem m_ConversionSystem, RigComponent RigComponent, Transform Root, EntityManager dstManager, Entity rootEntity, DOTSDynamicBoneClass boneComponent, ref DynamicBuffer<Particle> m_Particles) Parameters Type Name Description GameObjectConversionSystem m_ConversionSystem Provided GameObjectConversionSystem RigComponent RigComponent RigComponent to be used on the conversion Transform Root The Root GameObject with the RigComponent EntityManager dstManager EntityManager Entity rootEntity Entity where the root DOTSDynamicBone will affect DOTSDynamicBoneClass boneComponent Bone related data DynamicBuffer < Particle > m_Particles Buffer of particles to ppopulate with data. Returns Type Description DOTSDynamicBone DOTSDynamicBone UpdateName() Updates the name of the Name property. (Used only in the Editor) Declaration public void UpdateName()"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneClass.UpdateDataFrom.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneClass.UpdateDataFrom.html",
    "title": "Enum DOTSDynamicBoneClass.UpdateDataFrom | DOTS Dynamic Bone",
    "keywords": "Enum DOTSDynamicBoneClass.UpdateDataFrom Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum UpdateDataFrom Fields Name Description AnimatedLocalToWorld Custom"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneComponent.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneComponent.html",
    "title": "Class DOTSDynamicBoneComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneComponent This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent Inheritance System.Object DOTSDynamicBoneComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneComponent : MonoBehaviour, IConvertGameObjectToEntity Remarks This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent Fields m_DOTSDynamicBone Declaration public DOTSDynamicBoneClass m_DOTSDynamicBone Field Value Type Description DOTSDynamicBoneClass Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Sets up the Entity during conversion Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity The entity the GameObject will be convert to. EntityManager dstManager The provided Entitymanager for conversion. GameObjectConversionSystem conversionSystem The provided GameObjectConversionSystem for conversion. Start() Declaration public void Start() Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneCulling_Tag.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneCulling_Tag.html",
    "title": "Struct DOTSDynamicBoneCulling_Tag | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneCulling_Tag Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneCulling_Tag : IComponentData Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneIndependantBone_Link.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneIndependantBone_Link.html",
    "title": "Struct DOTSDynamicBoneIndependantBone_Link | DOTS Dynamic Bone",
    "keywords": "Struct DOTSDynamicBoneIndependantBone_Link Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSDynamicBoneIndependantBone_Link : IComponentData Fields DOTSDynamicBoneIndependant_Entity Declaration public Entity DOTSDynamicBoneIndependant_Entity Field Value Type Description Entity Implements IComponentData"
  },
  "api/DOTSDynamicBone.DOTSDynamicBoneIndependantMultipleComponent.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBoneIndependantMultipleComponent.html",
    "title": "Class DOTSDynamicBoneIndependantMultipleComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneIndependantMultipleComponent This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. Inheritance System.Object DOTSDynamicBoneIndependantMultipleComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneIndependantMultipleComponent : MonoBehaviour, IConvertGameObjectToEntity Remarks This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. Fields Bones Declaration public List<DOTSDynamicBoneClass> Bones Field Value Type Description List < DOTSDynamicBoneClass > RigComponent Declaration public RigComponent RigComponent Field Value Type Description RigComponent UseUniqueRigComponents Declaration public bool UseUniqueRigComponents Field Value Type Description System.Boolean Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem GetMeshRenderers(RigComponent) This returns a list of SkinnedMeshedRenderers attach to the given RigComponent Declaration public List<SkinnedMeshRenderer> GetMeshRenderers(RigComponent rig) Parameters Type Name Description RigComponent rig Returns Type Description List < SkinnedMeshRenderer > Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.DOTSDynamicBonesComponent.html": {
    "href": "api/DOTSDynamicBone.DOTSDynamicBonesComponent.html",
    "title": "Class DOTSDynamicBonesComponent | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBonesComponent This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. Inheritance System.Object DOTSDynamicBonesComponent Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBonesComponent : MonoBehaviour, IConvertGameObjectToEntity Remarks This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. Fields Bones Declaration public List<DOTSDynamicBoneClass> Bones Field Value Type Description List < DOTSDynamicBoneClass > RigComponent Declaration public RigComponent RigComponent Field Value Type Description RigComponent Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem GetMeshRenderers(RigComponent) This returns a list of SkinnedMeshedRenderers attach to the given RigComponent Declaration public List<SkinnedMeshRenderer> GetMeshRenderers(RigComponent rig) Parameters Type Name Description RigComponent rig Returns Type Description List < SkinnedMeshRenderer > Start() Declaration public void Start() Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.DOTSPlane.html": {
    "href": "api/DOTSDynamicBone.DOTSPlane.html",
    "title": "Struct DOTSPlane | DOTS Dynamic Bone",
    "keywords": "Struct DOTSPlane A DOTS representation of a Unity Plane Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct DOTSPlane : IComponentData Remarks A DOTS representation of a Unity Plane that was made before I starting using the Unity.Physics.Plane....I'm still using this plane though cause it works Constructors DOTSPlane(float3, float3) Declaration public DOTSPlane(float3 inNormal, float3 inPoint) Parameters Type Name Description float3 inNormal float3 inPoint DOTSPlane(float3, float3, float3) Declaration public DOTSPlane(float3 a, float3 b, float3 c) Parameters Type Name Description float3 a float3 b float3 c DOTSPlane(float3, Single) Declaration public DOTSPlane(float3 inNormal, float distance) Parameters Type Name Description float3 inNormal System.Single distance Properties distance Declaration public float distance { get; set; } Property Value Type Description System.Single flipped Declaration public readonly DOTSPlane flipped { get; } Property Value Type Description DOTSPlane normal Declaration public float3 normal { get; set; } Property Value Type Description float3 Methods ClosestPointOnPlane(float3) Declaration public float3 ClosestPointOnPlane(float3 point) Parameters Type Name Description float3 point Returns Type Description float3 Flip() Declaration public void Flip() GetDistanceToPoint(float3) Declaration public float GetDistanceToPoint(float3 point) Parameters Type Name Description float3 point Returns Type Description System.Single GetSide(float3) Declaration public bool GetSide(float3 point) Parameters Type Name Description float3 point Returns Type Description System.Boolean SameSide(float3, float3) Declaration public bool SameSide(float3 inPt0, float3 inPt1) Parameters Type Name Description float3 inPt0 float3 inPt1 Returns Type Description System.Boolean Set3Points(float3, float3, float3) Declaration public void Set3Points(float3 a, float3 b, float3 c) Parameters Type Name Description float3 a float3 b float3 c SetNormalAndPosition(float3, float3) Declaration public void SetNormalAndPosition(float3 inNormal, float3 inPoint) Parameters Type Name Description float3 inNormal float3 inPoint Translate(DOTSPlane, Vector3) Declaration public static DOTSPlane Translate(DOTSPlane plane, Vector3 translation) Parameters Type Name Description DOTSPlane plane Vector3 translation Returns Type Description DOTSPlane Translate(Vector3) Declaration public void Translate(Vector3 translation) Parameters Type Name Description Vector3 translation Implements IComponentData"
  },
  "api/DOTSDynamicBone.ExcludeEntityFromSimulation.html": {
    "href": "api/DOTSDynamicBone.ExcludeEntityFromSimulation.html",
    "title": "Class ExcludeEntityFromSimulation | DOTS Dynamic Bone",
    "keywords": "Class ExcludeEntityFromSimulation This class holds data related to simulation exclusion Inheritance System.Object ExcludeEntityFromSimulation Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public class ExcludeEntityFromSimulation Fields ExcludeChildrenFromCollision Declaration public bool ExcludeChildrenFromCollision Field Value Type Description System.Boolean Set this to true to exclude the transform's children from collision as well ExcludeChildrenFromPhysics Declaration public bool ExcludeChildrenFromPhysics Field Value Type Description System.Boolean Set this to true to also disable the children of this transform ExcludeFromCollision Declaration public bool ExcludeFromCollision Field Value Type Description System.Boolean Set this to true to exlude from Collisions ExcludeFromPhysics Declaration public bool ExcludeFromPhysics Field Value Type Description System.Boolean Set this to true to exclude from normal physics simulations transform Declaration public Transform transform Field Value Type Description Transform Transform to exclude Properties Null Declaration public static ExcludeEntityFromSimulation Null { get; } Property Value Type Description ExcludeEntityFromSimulation"
  },
  "api/DOTSDynamicBone.html": {
    "href": "api/DOTSDynamicBone.html",
    "title": "Namespace DOTSDynamicBone | DOTS Dynamic Bone",
    "keywords": "Namespace DOTSDynamicBone Classes DOTSDynamicBoneClass This holds and displays all the data needs to modify to create the DOTSDynamicBone data DOTSDynamicBoneComponent This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the IndependantDOTSDynamicBoneComponent DOTSDynamicBoneIndependantMultipleComponent This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. DOTSDynamicBonesComponent This is a component that creates a multiple DOTSDynamicBone_BufferElements onto an Entity. ExcludeEntityFromSimulation This class holds data related to simulation exclusion IndependantDOTSDynamicBone This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the DOTSDynamicBoneIndependantMultipleComponent Structs DOTSDynamicBone This is a DOTSDynamicBone. This struct holds data used for calculations DOTSDynamicBone_BufferElement This is a BufferElement that holds a bone and the start and end index of its particles in the Particle DynamicBuffer DOTSDynamicBone_TransformOverrideLink_Tag DOTSDynamicBoneCulling_Tag DOTSDynamicBoneIndependantBone_Link DOTSPlane A DOTS representation of a Unity Plane IndependantDOTSDynamicBone_Tag This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Particle This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data ParticleTransform This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Enums DOTSDynamicBone.FreezeAxis DOTSDynamicBone.UpdateMode DOTSDynamicBoneClass.UpdateDataFrom ParticleTransform.DOTSDynamicBoneColliderType"
  },
  "api/DOTSDynamicBone.IndependantDOTSDynamicBone.html": {
    "href": "api/DOTSDynamicBone.IndependantDOTSDynamicBone.html",
    "title": "Class IndependantDOTSDynamicBone | DOTS Dynamic Bone",
    "keywords": "Class IndependantDOTSDynamicBone This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the DOTSDynamicBoneIndependantMultipleComponent Inheritance System.Object IndependantDOTSDynamicBone Implements IConvertGameObjectToEntity Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public class IndependantDOTSDynamicBone : MonoBehaviour, IConvertGameObjectToEntity Remarks This is a component that creates a single DOTSDynamicBone onto an Entity. If you want more please use the DOTSDynamicBonesComponent or the DOTSDynamicBoneIndependantMultipleComponent Fields m_DOTSDynamicBone Declaration public DOTSDynamicBoneClass m_DOTSDynamicBone Field Value Type Description DOTSDynamicBoneClass Methods Convert(Entity, EntityManager, GameObjectConversionSystem) Declaration public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem) Parameters Type Name Description Entity entity EntityManager dstManager GameObjectConversionSystem conversionSystem Implements IConvertGameObjectToEntity"
  },
  "api/DOTSDynamicBone.IndependantDOTSDynamicBone_Tag.html": {
    "href": "api/DOTSDynamicBone.IndependantDOTSDynamicBone_Tag.html",
    "title": "Struct IndependantDOTSDynamicBone_Tag | DOTS Dynamic Bone",
    "keywords": "Struct IndependantDOTSDynamicBone_Tag This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public struct IndependantDOTSDynamicBone_Tag : IComponentData Remarks This is a tag that is added to entities that classify as an IndependantDOTSDynamicBone Implements IComponentData"
  },
  "api/DOTSDynamicBone.Particle.html": {
    "href": "api/DOTSDynamicBone.Particle.html",
    "title": "Struct Particle | DOTS Dynamic Bone",
    "keywords": "Struct Particle This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data Implements IBufferElementData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct Particle : IBufferElementData Remarks This contains all the data related to a section the DOTSDynamicBone. Here the data is store and calculations are performed on the data Fields AnimatedLocalToRootIndex Declaration public int AnimatedLocalToRootIndex Field Value Type Description System.Int32 The index relative to the Core Entity's AnimatedLocalToRoot and AnimatedLocalToWorld DynamicBuffer collider Declaration public Unity.Physics.PhysicsCollider collider Field Value Type Description Unity.Physics.PhysicsCollider DOTS Physics Collider associated with the particle h_Damping Declaration public float h_Damping Field Value Type Description System.Single These are temporary values used when switching from a disabed/enabled mode h_Elasticity Declaration public float h_Elasticity Field Value Type Description System.Single These are temporary values used when switching from a disabed/enabled mode h_Friction Declaration public float h_Friction Field Value Type Description System.Single These are temporary values used when switching from a disabed/enabled mode h_Inert Declaration public float h_Inert Field Value Type Description System.Single These are temporary values used when switching from a disabed/enabled mode h_Stiffness Declaration public float h_Stiffness Field Value Type Description System.Single These are temporary values used when switching from a disabed/enabled mode m_AnimatedLocalToWorldTransform Declaration public ParticleTransform m_AnimatedLocalToWorldTransform Field Value Type Description ParticleTransform The \"Transform\" of the Entity the Particle represent that has been converted to AnimatedLocalToRoot space. m_BoneLength Declaration public float m_BoneLength Field Value Type Description System.Single length of the bone at this particle m_Bound Declaration public TransformsExtensions.Bound m_Bound Field Value Type Description TransformsExtensions.Bound type of bound for collision calculations. m_Damping Declaration public float m_Damping Field Value Type Description System.Single How much the particle slowed down. m_Disabled Declaration public bool m_Disabled Field Value Type Description System.Boolean disable the particle from calculations m_Elasticity Declaration public float m_Elasticity Field Value Type Description System.Single How much the force applied to return each particle to original orientation. m_EndOffset Declaration public float3 m_EndOffset Field Value Type Description float3 Used for internal calculations m_Exclude Declaration public bool m_Exclude Field Value Type Description System.Boolean exclude the particle from calculations m_ExcludeFromCollision Declaration public bool m_ExcludeFromCollision Field Value Type Description System.Boolean exclude from natural physics calculations m_Friction Declaration public float m_Friction Field Value Type Description System.Single How much the particle slowed down when collide. m_Inert Declaration public float m_Inert Field Value Type Description System.Single How much particle's position change is ignored in physics simulation. m_InitLocalPosition Declaration public float3 m_InitLocalPosition Field Value Type Description float3 Used for internal calculations m_InitLocalRotation Declaration public quaternion m_InitLocalRotation Field Value Type Description quaternion Used for internal calculations m_isCollide Declaration public bool m_isCollide Field Value Type Description System.Boolean this is set to true if a collision is detected. m_ParentIndex Declaration public int m_ParentIndex Field Value Type Description System.Int32 The index of the parent Particle (-1 = the parent info is in the bone data) m_Position Declaration public float3 m_Position Field Value Type Description float3 Used for internal calculations m_PrevPosition Declaration public float3 m_PrevPosition Field Value Type Description float3 Used for internal calculations m_Radius Declaration public float m_Radius Field Value Type Description System.Single Each particle can be a sphere to collide with colliders. Radius describe sphere's size. m_Stiffness Declaration public float m_Stiffness Field Value Type Description System.Single How much particle's original orientation are preserved. m_Transform Declaration public ParticleTransform m_Transform Field Value Type Description ParticleTransform The \"Transform\" of the Entity the Particle represents m_TransformEntity Declaration public Entity m_TransformEntity Field Value Type Description Entity Entity that the Particle epresents Properties Null Declaration public static readonly Particle Null { get; } Property Value Type Description Particle returns a \"Null\" particle Methods CalculateParameters() Calculates the parameters based on internal data values Declaration public void CalculateParameters() Disable() Disables the Paricle and excludes it from calculations Declaration public void Disable() Enable() Enables the Partile and includes it in calculations Declaration public void Enable() Exclude() Excludes the Particle from calculations Declaration public void Exclude() Include() Includes the Particles in calculations Declaration public void Include() Verify() Verifies if some important values are valid. Declaration public void Verify() Zero() Zeros out the m_Transform's rotation and position, the m_Posision, and m_PrevPosition Declaration public void Zero() Implements IBufferElementData"
  },
  "api/DOTSDynamicBone.ParticleTransform.DOTSDynamicBoneColliderType.html": {
    "href": "api/DOTSDynamicBone.ParticleTransform.DOTSDynamicBoneColliderType.html",
    "title": "Enum ParticleTransform.DOTSDynamicBoneColliderType | DOTS Dynamic Bone",
    "keywords": "Enum ParticleTransform.DOTSDynamicBoneColliderType Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax public enum DOTSDynamicBoneColliderType Fields Name Description Cube Plane SphereLike"
  },
  "api/DOTSDynamicBone.ParticleTransform.html": {
    "href": "api/DOTSDynamicBone.ParticleTransform.html",
    "title": "Struct ParticleTransform | DOTS Dynamic Bone",
    "keywords": "Struct ParticleTransform This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Implements IComponentData Namespace : DOTSDynamicBone Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ParticleTransform : IComponentData Remarks This is an imitation of a Unity Transform since RigidTransform didin't give me enough information Constructors ParticleTransform(float3, float3, quaternion, quaternion, float3, float3, Int32) creates a new ParticleTransform using the given arguments Declaration public ParticleTransform(float3 position, float3 localPosition, quaternion rotation, quaternion localRotation, float3 localScale, float3 lossyScale, int childCount) Parameters Type Name Description float3 position [psotopm float3 localPosition ;pca; position quaternion rotation rotation quaternion localRotation local rotation float3 localScale local scale float3 lossyScale lossy scale System.Int32 childCount amount of children the transform has ParticleTransform(Transform) creates a ParticleTransform from the provided Transform Declaration public ParticleTransform(Transform transform) Parameters Type Name Description Transform transform UnityEngine.Transform Fields childCount Declaration public int childCount Field Value Type Description System.Int32 amount of children the transform has localPosition Declaration public float3 localPosition Field Value Type Description float3 local position localRotation Declaration public quaternion localRotation Field Value Type Description quaternion local rotation localScale Declaration public float3 localScale Field Value Type Description float3 local scale lossyScale Declaration public float3 lossyScale Field Value Type Description float3 lossy scale position Declaration public float3 position Field Value Type Description float3 position rawLTW Declaration public LocalToWorld rawLTW Field Value Type Description LocalToWorld rotation Declaration public quaternion rotation Field Value Type Description quaternion rotation Properties Null Declaration public static readonly ParticleTransform Null { get; } Property Value Type Description ParticleTransform A Null ParticleTransform Methods Equals(ParticleTransform) this compares the ParticleTransform to another one Declaration public bool Equals(ParticleTransform other) Parameters Type Name Description ParticleTransform other Returns Type Description System.Boolean SetTransform(Transform) Sets the value of the ParticleTransform using the given transform Declaration public void SetTransform(Transform transform) Parameters Type Name Description Transform transform UnityEngine.Transform ToFloat4x4(Boolean) returns a float4x4 version of the PaticleTransform's data Declaration public float4x4 ToFloat4x4(bool local = false) Parameters Type Name Description System.Boolean local set to true to use the localPosition and localRotation Returns Type Description float4x4 ToLocalToParent() converts the ParticleTransform into a LocalToParent using the internal data values Declaration public LocalToParent ToLocalToParent() Returns Type Description LocalToParent LocalToParent ToLocalToWorld() converts the ParticleTransform into a LocalToWorld using the internal data values Declaration public LocalToWorld ToLocalToWorld() Returns Type Description LocalToWorld LocalToWorld ToLocalToWorld(Boolean) Declaration public LocalToWorld ToLocalToWorld(bool useOnlyLocalScale) Parameters Type Name Description System.Boolean useOnlyLocalScale Returns Type Description LocalToWorld ToTransform(ParticleTransform) This creates a UnityEngine.Trasform from the PaticleTransform's data. Declaration public static Transform ToTransform(ParticleTransform particleTransform) Parameters Type Name Description ParticleTransform particleTransform ParticleTransform Returns Type Description Transform UpdateTransform(float3, float3, quaternion, quaternion, float3, float3, Int32) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(float3 position, float3 localPosition, quaternion rotation, quaternion localRotation, float3 localScale, float3 lossyScale, int childCount = 0) Parameters Type Name Description float3 position [psotopm float3 localPosition ;pca; position quaternion rotation rotation quaternion localRotation local rotation float3 localScale local scale float3 lossyScale lossy scale System.Int32 childCount amount of children the transform has UpdateTransform(float3, quaternion) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(float3 position, quaternion rotation) Parameters Type Name Description float3 position position quaternion rotation rotation UpdateTransform(LocalToWorld) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(LocalToWorld ltw) Parameters Type Name Description LocalToWorld ltw LocalToWorld UpdateTransform(LocalToWorld, float3, quaternion) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(LocalToWorld ltw, float3 localPosition, quaternion localRotation) Parameters Type Name Description LocalToWorld ltw Unity.Transforms.LocalToWorld float3 localPosition local postition quaternion localRotation local rotation UpdateTransform(LocalToWorld, Translation, Rotation) Updates the ParticleTransform using the given data Declaration public void UpdateTransform(LocalToWorld ltw, Translation position, Rotation rotation) Parameters Type Name Description LocalToWorld ltw Unity.Transforms.LocalToWorld Translation position Unity.Transforms.Translation Rotation rotation Unity.Transforms.Rotation Implements IComponentData"
  },
  "api/DOTSDynamicBone.Systems.DOTSDynamicBoneTransformOverrideSystem.html": {
    "href": "api/DOTSDynamicBone.Systems.DOTSDynamicBoneTransformOverrideSystem.html",
    "title": "Class DOTSDynamicBoneTransformOverrideSystem | DOTS Dynamic Bone",
    "keywords": "Class DOTSDynamicBoneTransformOverrideSystem Inheritance System.Object DOTSDynamicBoneTransformOverrideSystem Namespace : DOTSDynamicBone.Systems Assembly : cs.temp.dll.dll Syntax public class DOTSDynamicBoneTransformOverrideSystem : SystemBase Methods OnCreate() Declaration protected override void OnCreate() OnUpdate() Declaration protected override void OnUpdate()"
  },
  "api/DOTSDynamicBone.Systems.html": {
    "href": "api/DOTSDynamicBone.Systems.html",
    "title": "Namespace DOTSDynamicBone.Systems | DOTS Dynamic Bone",
    "keywords": "Namespace DOTSDynamicBone.Systems Classes DOTSDynamicBoneTransformOverrideSystem"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | DOTS Dynamic Bone",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image. Welcome to the DOTS Dynamic Bone Documentation Page The goal of these systems and tools is to allow creators to add more to thier game whether it be for visual effect, simulation, animation. Here you will find Documentation, Concepts, and some examples about DOTS Dynamic Bone. Click Here to go to the Project Setup page. Click Here for General Concepts."
  },
  "manual/DOTSDynamicBone.Components.DOTSDynamicBoneComponent.html": {
    "href": "manual/DOTSDynamicBone.Components.DOTSDynamicBoneComponent.html",
    "title": "IndependantDOTSDynamicBone Component | DOTS Dynamic Bone",
    "keywords": "IndependantDOTSDynamicBone The IndependantDOTSDynamicBone is similar to the other 2 component except this can be placed anywhere on any entity. This however, comes with a slight performance hit since the relevant Job(s) need to get the data from the entities you want bones attached to."
  },
  "manual/DOTSDynamicBone.Components.DOTSDynamicBonesComponent.html": {
    "href": "manual/DOTSDynamicBone.Components.DOTSDynamicBonesComponent.html",
    "title": "DOTSDynamicBones Component | DOTS Dynamic Bone",
    "keywords": "DOTSDynamicBones Component The DOTSDynamicBonesComponent is the same as the DOTSDynamicBoneComponent except you can add multiple bons to a single Entity. This Component adds a DynmiacBuffer , DynamicBuffer , and a DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> (if colliders are added) to the entity during conversion. It is very important that you add this to the root GameObject that has a RigComponent attached to it as well. The parameters are the same so that's it!"
  },
  "manual/DOTSDynamicBone.Components.IndependantDOTSDynamicBone.html": {
    "href": "manual/DOTSDynamicBone.Components.IndependantDOTSDynamicBone.html",
    "title": "DOTSDynamicBone Component | DOTS Dynamic Bone",
    "keywords": "DOTSDynamicBone Component This Component adds a DOTSDynamicBone, DynamicBuffer , and a DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> (if colliders are added) to the entity during conversion. It is very important that you add this to the root GameObject that has a RigComponent attached to it as well. // put here or something Parameters The parameters for this are accessable from DOTSDynamicBoneClass . These parameters are used for the conversion and initialization process of DOTS Dynamic Bones. RigComponent Attach the RigComponent from the desired GameObject in here. remeber: The RigComponent should be in the location as DOTSDynamicBoneComponnet...maybe I should autodetect it? // insert image of RigComponent option here Name Ignore this, this is for the Editor during PlayMode. Rhis is not stored or used in any other way. //insert image of Name Disable Set this to true to disable to the bone during conversion. Due to the nature of how AnimatedLocalToRoot works, disbabling a bone or particle doesn't stop all the calculations. the Particles still need to be updated relative to thier parent so the only calculations that are disabled are the physics calculations. Note you can call Disable() on either a DOTSDynamicBone or a Particle anytime during runtime to disable it. Another Note: be sure to set the bone and/or particle after you make changes to it (remeber, no references allowed) Update Local To World Transforms Set this to true in order update the associated particle's entity with the ParticleTransform data. NOTE: this will execute adter ExportPhysicsWorld and will overwrite any collisions done to the Entity during that time step. This is subject to change Use Animated Local To Root Set this to true to convert the LocalToWorld calculations into AnimatedLocalToRoot values. This should be also set to true. Rig Component This is the RigComponent that comes with the Unity.Animation package. Simply add it to the Root GameObject, then drag it into the RigComponent field. This is Required Root Drag the Root GameObject in this field. This is required Update Rate This is the internal simulation rate. Update Mode Internal physics simulation type. Damping Distribution How much the bones slowed down over a distribution curve. Elasticity How much the force applied to return each bone to original orientation. Elasticity Distribution How much the force applied to return each bone to original orientation over a distribution curve. Stiffness How much bone's original orientation are preserved. Stiffness Distribution How much bone's original orientation are preserved over a distribution curve. Inert How much character's position change is ignored in physics simulation. Inert Distribution How much character's position change is ignored in physics simulation over a distribution curve. Friction How much the bones slowed down when collide. Friction Distribution How much the bones slowed down when collide over a distribution curve. Radius Each bone can be a sphere to collide with colliders. Radius describe sphere's size. Radius Distribution Each bone can be a sphere to collide with colliders. Radius describe sphere's size over a distribution curve. End Length If End Length is not zero, an extra bone is generated at the end of transform hierarchy. End Offset If End Offset is not zero, an extra bone is generated at the end of transform hierarchy. Gravity The force apply to bones. Partial force apply to character's initial pose is cancelled out. Force The force apply to bones. Colliders Collider objects interact with the bones. Exclusions Bones excluded from physics simulation. Freeze Axis Constrain bones to move on specified plane. Distant Disable Disable physics simulation automatically if Entity is far from the m_ReferencedObject Entity. Reference Object Entity to be referenced for m_DistantDisable Distance To Object Distnace the Entity has to be from the referenced Entity"
  },
  "manual/DOTSDynamicBone.Concepts.Bones.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Bones.html",
    "title": "Bones | DOTS Dynamic Bone",
    "keywords": "Bones A Bone is a data structure that holds all data relevant to their associated Particles and Collider(s) .the Bone data structure is associated with 1 Entity . The `Entity the Bone is associated with is refered as a RigComponentEntity . To create a RigComponentEntity , all you have to do is add a RigComponent and a ConvertToEntity Component to a GameObject. This will add all nessacary RigComponent data furing the Coversion of the GameObject. Each Bone is assigned a specific DynamicBuffer<Particle> . NOTE: depending on the Bone type the way to access the Bone's DynamicBuffer<Particle data may be different. There are 2 types of Bones that the system contains. They are: Single Bone : where a DOTSDynamicBone data structure added to an Entity . The DOTSDynamicBone data structure only represents a single bone. Multiple Bones : where a DOTSDynamicBone_BufferElement data structure is added to an Entity . Unlike Single Bone, Multiple Bones is for use with Multiple Bones on a single Entity . Why not just use DynamicBuffer for both cases? I do this simply for efficency and unnessacary memory allocation. The DynamicBuffer uses indexing and in order to manage multiple Particles on a single Entity, some more data needed to be added in the DOTSDynamicBone_BufferElement data structure. Can I modify the Bone data? Yes, you can modify and create new bone at runtime in order to change how the DOTS Dynamic Bone functions. See Single Bone and Multiple Bones for more information."
  },
  "manual/DOTSDynamicBone.Concepts.Bones.MultipleBone.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Bones.MultipleBone.html",
    "title": "Multiple Bone | DOTS Dynamic Bone",
    "keywords": "Multiple Bone In DOTS Dynamic Bone a Multple Bone is associated with entities that contain the DOTSDynamicBone_BufferElement DynamicBuffer . The DOTSDynamicBone_BufferElement data can be modified at any time. The DOTSDynamicBone_BufferElement contains all the DOTSDynamicBone data as well as 2 int value that represents a start and end index respectivly. the start and end index data is used to get the relevant Particle data within the DynamicBuffer<Particle> . So to access specific DOTSDynamicBone_BufferElement data's Particle data you would have to do something similar to this: ... DynamicBuffer<DOTSDynamicBone_BufferElement> bones = GetBuffer<DOTSDynamicBone_BufferElement>(RigComponentEntity); DynamicBuffer<Particle> particles = GetBuffer<Particle>(RigComponentEntity); for(int i = 0; i < bones.Length; i++){ DOTSDynamicBone_BufferElement bone = bones[i]; DOTSDynamicBone boneData = bone.Value; for(int j = bone.start; j < bone.end; j++){ // deal with particle stuff in here } } ... Please checkout the DOTSDynamicBone_BufferElement for more information"
  },
  "manual/DOTSDynamicBone.Concepts.Bones.SingleBone.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Bones.SingleBone.html",
    "title": "Single Bone | DOTS Dynamic Bone",
    "keywords": "Single Bone In DOTS Dynamic Bone a Single Bone is associated with entities that contain the DOTSDynamicBone ComponentData. The DOTSDynamicBone data can be modified at any time. General Single Bone Properties Here I will go over some important properties and tips when working with the DOTSDynamicBone ComponentData. DOTSDynamicBone and DOTSDynamicBone_BufferElement do not share the same jobs. since DOTSDynamicBone represents a single bone, a seperate Job is used for DOTSDynamicBone_BufferElement . Since DOTSDynamicBone holds less data than DOTSDynamicBone_BufferElement and doesn't deal with inicies, it is generally faster to deal with. UseNaturalColliders this a bool associated with the Natural Collision System . UseAnimatedLocalToRoot this is a bool that tells the DOTSDynamicBoneUpdateSystem whether or not to convert a Particle's transform data into `Unity.Animation.AnimatedLocalToWorld transform data. If this is false then you will experience \"jank\" unless you are centered in world coordinates. It is highly recommended you always set this to true. However, I leave the choice up to you. UpdateLocalToWorldTransforms, UpdateTranslationTransforms, UpdateRotationTransforms These 3 bool values, when one of them is set to true, will add an transform override ComponentData to the RigComponentEntity . See DOTSDynamicBoneParticleLocalToWorldOverride_Tag for more information. m_RootEntity This is the the Entity associated with the root particle. this value should match the value of the m_TransformEntity of the first Particle in the DynamicBuffer . m_ReferenceObjectEntity, m_ReferenceObject, and m_DistanceToObject This data is used with the DOTSDynamicBoneCullingSystem. The m_ReferenceObjectEntity is the Entity used to the distance comparison. The m_ReferenceObject is the m_ReferenceObjectEntity's transform data. and the m_DistanceToObject is the max distance the RigComponentEntity and the m_ReferenceObjectEntity must be before the Bone is disabled. This data can be changed at anytime but in order for the DOTSDynamicBoneCullingSystem to pick it up, you must have the DOTSDynamicBoneCulling_Tag added to Entity as well. Any other not mentioned should be looked at here"
  },
  "manual/DOTSDynamicBone.Concepts.Collisions.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Collisions.html",
    "title": "Collisions | DOTS Dynamic Bone",
    "keywords": "Collisions DOTS Dynamic Bone has 2 Collision Systems. These collision systems allows all DOTS Dynamic Bone Components to collide with all Unity.Physics.PhysicCollider entities within your project. These 2 systems are: Preset Collision System Natural Collision System"
  },
  "manual/DOTSDynamicBone.Concepts.Collisions.NaturalCollisions.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Collisions.NaturalCollisions.html",
    "title": "Natural Collision | DOTS Dynamic Bone",
    "keywords": "Natural Collisions In DOTS Dynamic Bone Natural collision referes to collisions using Unity's Unity.Physics package components/data. Instead of creating and storing custom data, DOTS Dynamic Bone uses the Unity.Physics.PhysicsCollider in its physics calculations. This allows a DOTS Dynamic Bone Particle to collide with any other entity that contains a Unity.Physics.PhysicsCollider and the best part is that it is very easy to use. In order to use Natural collision just set the Use Natural Colliders setting to true on any DOTS Dynamic Bone Component. You can also add Natural collision to an already existing Bone by adding a DOTSDynamicBoneNaturalCollider_Tag to your DOTSDynamicBone Entity . This tag let's the Natural collision system know you want to use it. Also be sure to set UseNaturalColliders on the DOTS Dynamic Bone Entity to true and to make sure the collider property in the Particle's DynamicBuffer is not null. If you only want only some Particles to take part in the collision then you can leave the Particle's collider data null which will process the Particle noramlly. Here's an example oh how to add a DOTS Dynamic Bone Entity to the Natural collision system: public class DOTSDynamicBoneAddCollisionSystemExample : SystemBase { protected override void OnUpdate() { Entities. WithName(\"AddBoneToCollisionSystemJob\") .WithoutBurst() .WithAll<DOTSDynamicBone_AddToCollisionSystem_Tag>() .WithNone<DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag>() .ForEach((Entity e,ref DOTSDynamicBone.DOTSDynamicBone boneData,ref DynamicBuffer<DOTSDynamicBone.Particle> particles)=> { // set the UseNaturalColliders property to true boneData.UseNaturalColliders = true; // let's add the Unity.Physics.PhysicsCollider to each respective particle. // let's also disable collision calculations for every Particle who ith index is divisiable by 2 just because we can. for(int i = 0; i < particles.Length; i++) { DOTSDynamicBone.Particle p = particles[i]; p.m_ExcludeFromCollision = i % 2 == 0; // exclude from collision if i mod 2 == 0 // if the m_TransformEntity has a PhysicsCollider then set it unsafe { if (HasComponent<Unity.Physics.PhysicsCollider>(p.m_TransformEntity)) { Unity.Physics.PhysicsCollider col = GetComponent<Unity.Physics.PhysicsCollider>(p.m_TransformEntity); if (col.IsValid && col.Value.IsCreated) p.collider = col.ColliderPtr; else p.collider = null; } else p.collider = null; } particles[i] = p; } // these two functions are not Burstable. this addition and removal should be done // elsewhere. This is just an example. EntityManager.AddComponentData(e, new DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag { }); EntityManager.RemoveComponent<DOTSDynamicBone_AddToCollisionSystem_Tag>(e); }) .Run(); } } public struct DOTSDynamicBone_AddToCollisionSystem_Tag : IComponentData { } public struct DOTSDynamicBone_RemoveFromCollisionSystem_Tag : IComponentData { }"
  },
  "manual/DOTSDynamicBone.Concepts.Collisions.PresetCollisions.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Collisions.PresetCollisions.html",
    "title": "Preset Collisions | DOTS Dynamic Bone",
    "keywords": "Preset Collisions In DOTS Dynamic Bone the Preset Collision System simpily refers to colliders generated with/within the DOTSDynamicBoneCollider Component. The reason for this system is to allow the developer to either define a specific set of Entities to collide with or to collide with simple some simple shape data. When you add the DOTSDynamicBoneCollider Component it adds a DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> which holds the data retaining to your Preset Colliders . This data is used everyframe to perform come collision calculations. Here's an example oh how to add a DOTS Dynamic Bone Entity to the Preset collision system: public class DOTSDynamicBoneAddToPresetCollisionSystemExample : SystemBase { protected override void OnUpdate() { // Get Collider Entity ... Entity colliderEntity; Unity.Physics.PhysicsCollider otherEntityCollider = GetComponentData<Unity.Physics.PhysicsCollider>(colliderEntity); ... Entities. WithName(\"AddBoneToPresetCollisionSystemJob\") .WithoutBurst() .WithAll<DOTSDynamicBone_AddToPresetCollisionSystem_Tag>() .WithNone<DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag>() .WithReadOnly(colliderEntity) .WithReadOnly(otherEntityCollider) .ForEach((Entity e,ref DOTSDynamicBone.DOTSDynamicBone boneData,ref DynamicBuffer<DOTSDynamicBone.Particle> particles)=> { // set the UseNaturalColliders property to true to use the Particle's PhysicsCollider boneData.UseNaturalColliders = true; // add the buffer. NOTE: this should invalidate the DynamicBuffer<DOTSDynamicBone.Particle> buffer so we have to get it again DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders = AddBuffer<DOTSDynamicBoneCollider_BufferElement>(e); particles = GetBuffer<DOTSDynamicBone.Particle>(e); //now let's add a preset collider m_Colliders.add(new DOTSDynamicBoneCollider_BufferElement { m_Direction = TransformsExtensions.Direction.Y, enabled = true, fallbackToParicleRadiusOnNullPhysicsCollider = true, entity = colliderEntity, m_Radius = 0.5f, boneEntity = e, transform = new ParticleTransform(), //<- you may want to set this yourself useUnityPhysicsCollider = true, useParticlePhysicsCollider = true, m_Bound = TransformsExtensions.Bound.Outside, m_Center = new float3(), persistant = true, colliderPtr = otherEntityCollider }); // let's add the Unity.Physics.PhysicsCollider to each respective particle. // let's also disable collision calculations for every Particle who ith index is divisiable by 2 just because we can. for(int i = 0; i < particles.Length; i++) { DOTSDynamicBone.Particle p = particles[i]; p.m_ExcludeFromCollision = i % 2 == 0; // exclude from collision if i mod 2 == 0 // if the m_TransformEntity has a PhysicsCollider then set it unsafe { if (HasComponent<Unity.Physics.PhysicsCollider>(p.m_TransformEntity)) { Unity.Physics.PhysicsCollider col = GetComponent<Unity.Physics.PhysicsCollider>(p.m_TransformEntity); if (col.IsValid && col.Value.IsCreated) p.collider = col.ColliderPtr; else p.collider = null; } else p.collider = null; } particles[i] = p; } // these two functions are not Burstable. this addition and removal should be done // elsewhere. This is just an example. EntityManager.AddComponentData(e, new DOTSDynamicBone.Collision.DOTSDynamicBoneNaturalCollider_Tag { }); EntityManager.RemoveComponent<DOTSDynamicBone_AddToCollisionSystem_Tag>(e); }) .Run(); } } public struct DOTSDynamicBone_AddToPresetCollisionSystem_Tag : IComponentData { } public struct DOTSDynamicBone_RemoveFromPresetCollisionSystem_Tag : IComponentData { } [] This Component has the data nessacary to perform wither a Natural Collision or a"
  },
  "manual/DOTSDynamicBone.Concepts.Collisions.Tips.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Collisions.Tips.html",
    "title": "Tups | DOTS Dynamic Bone",
    "keywords": "Tips Due to how Unity's Physic System works I wanted to give you some tips on how to get the desired result with DOTS Dynamic Bone . How do Use collisions without the collisions affecting my Entity? Add the PhysicsExclude Component to your GameObject or Entity. This allows your entity to have Unity's Physics-realted data without having it partake in Unity's Physics simulation. I checked the box \"Use Natural Colliders\" but collisions are not working? Perform these checks when trying to setup collision: did you add a physics collider to the desired Gameobject/Entity? are the collision filters preventing the physic colliders from contacting each other? did you check the Override Trasnform options? Can I get the collision to move with my animation? Yes, if you use the override options it will move the Entity associated with it which will in turn, move the physics collider. NOTE: static and kinematic bodies may not act as expected. Please make sure you understand how Unity's physics system works on these bodies before using them. My Entity keeps getting moved by other colliders when it touches my DOTS Dynamic Bone collider! This is normal behavior. if you only want the DOTS Dynamic Bone affected entities to move then I suggest adding a PhysicExclude component to it. If this is desired but the effect is too strong, i recommend playing around with the entity's mass."
  },
  "manual/DOTSDynamicBone.Concepts.General.html": {
    "href": "manual/DOTSDynamicBone.Concepts.General.html",
    "title": "General Concepts | DOTS Dynamic Bone",
    "keywords": "General Overview DOTS Dynamic Bone is broken up into 5 Systems, 16 Jobs, and 3 main components. The purpose of DOTS Dynamic Bone is to perform physics simulations on components within your model. You can use this to perform simulations on cloths, hair, rope, etc. Using the benefits of Unity DOTS, ECS, & Burst, systems were created to perform these calculations efficently with minimal performance hits in your Game/Application. Components DOTS Dynamic Bone contains 3 main component types (See the Components tab for more information: Bones Bone Multiple Bones Independant Bone Particles Colliders : Preset Colliders Natural Colliders DOTS Dynamic Bone contains 5 systems : NOTE: this list is ordered by when the system's Update call is executed DOTSDynamicBoneTransformOverrideSystem DOTSDynamicBoneCullingSystem DOTSDynamicBonePresetPhysicsCollisionSystem DOTSDynamicBoneNaturalCollisionSystem DOTSDynamicBoneUpdateSystem DOTS Dynamic Bone performs 16 jobs that updates data based on the Components in the Entity. These Jobs include: System: DOTSDynamicBoneCullingSystem DOTSDynamicBoneCullingUpdateTransformsJob DOTSDynamicBoneMultiple CullingUpdateTransformsJob System: DOTSDynamicBoneTransformOverrideSystem DOTSDynamicBone_ParticleLocalToWorldOverrideJob System: DOTSDynamicBonePresetPhysicsCollisionSystem DOTSDynamicBoneWithPresetCollidersJob DOTSDynamicBoneMultipleWithPresetCollidersJob IndependantDOTSDynamicBoneWithPresetCollidersJob System: DOTSDynamicBoneNaturalCollisionSystem DOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneMultipleNaturalCollisionUpdateJob IndependantDOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneIndependantMultipleNaturalCollisionUpdateJob System: DOTSDynamicBoneUpdateSystem DOTSDynamicBoneUpdateJob DOTSDynamicBoneMultipleUpdateJob DOTSDynamicBoneCollisionFinishJob DOTSDynamicBoneMultipleCollisionFinishJob IndependantDOTSDynamicBoneJob DOTSDynamicBoneIndependantMultipleJob IndependantDOTSDynamicBoneJob DOTSDynamicBoneIndependantCollisionFinishSystem"
  },
  "manual/DOTSDynamicBone.Concepts.Jobs.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Jobs.html",
    "title": "Jobs | DOTS Dynamic Bone",
    "keywords": "Jobs DOTS Dynamic Bone performs 18 jobs that updates data based on the Components in the Entity. These Jobs include: System: DOTSDynamicBoneCullingSystem DOTSDynamicBoneCullingUpdateTransformsJob DOTSDynamicBoneMultipleCullingUpdateTransformsJob System: DOTSDynamicBoneTransformOverrideSystem DOTSDynamicBone_ParticleLocalToWorldOverrideJob System: DOTSDynamicBonePresetPhysicsCollisionSystem DOTSDynamicBoneWithPresetCollidersJob DOTSDynamicBoneMultipleWithPresetCollidersJob IndependantDOTSDynamicBoneWithPresetCollidersJob IndependantDOTSDynamicBoneMultipleWithColliders System: DOTSDynamicBoneNaturalCollisionSystem DOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneMultipleNaturalCollisionUpdateJob IndependantDOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneIndependantMultipleNaturalCollisionUpdateJob System: DOTSDynamicBoneUpdateSystem DOTSDynamicBoneUpdateJob DOTSDynamicBoneMultipleUpdateJob DOTSDynamicBoneCollisionFinishJob DOTSDynamicBoneMultipleCollisionFinishJob IndependantDOTSDynamicBoneJob DOTSDynamicBoneIndependantMultipleJob DOTSDynamicBoneIndependantCollisionFinishSystem Now i will go over each job and give a breif description: DOTSDynamicBoneCullingSystem Both DOTSDynamicBoneCullingUpdateTransformsJob and DOTSDynamicBoneMultipleCullingUpdateTransformsJob is responsible for Updating data related to the culling system. The difference between them is the that one modifies Entities with the DOTSDynamicBone data component and the other modifies Entities with the DOTSDynamicBone_BufferElement DynamicBuffer d. Entities .WithName(\"DOTSDynamicBoneCullingUpdateTransformsJob\") .WithBurst() .WithAll<DOTSDynamicBoneCulling_Tag>() .WithReadOnly(GetLTW) .ForEach((ref DOTSDynamicBone bone) => { ... }) .ScheduleParallel(); Entities .WithName(\"DOTSDynamicBoneMultipleCullingUpdateTransformsJob\") .WithBurst() .WithAll<DOTSDynamicBoneCulling_Tag>() .WithReadOnly(GetLTW) .ForEach((ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones) => { ... }) .ScheduleParallel(); DOTSDynamicBoneTransformOverrideSystem The DOTSDynamicBone_ParticleLocalToWorldOverrideJob is responsible for updating entities that are associated with DOTS Dynamic Bone Entities that want the LocalToWorld , Translation , or Rotation values overwritten with the DOTS Dynamic Bone values. var OverrideJobHandle = Entities .WithName(\"DOTSDynamicBone_ParticleLocalToWorldOverrideJob\") .WithBurst() .ForEach((in DynamicBuffer<Particle> particles, in DOTSDynamicBoneParticleLocalToWorldOverride_Tag tag) => { ... }) .Schedule(Dependency); OverrideJobHandle.Complete(); DOTSDynamicBonePresetPhysicsCollisionSystem The DOTSDynamicBoneWithPresetCollidersJob , DOTSDynamicBoneMultipleWithPresetCollidersJob , IndependantDOTSDynamicBoneWithPresetCollidersJob are responsible for updating DOTS Dynamic Bone Entities associated with the Preset Collision System. The difference between them is the that one modifies Entities with the DOTSDynamicBone data component, the other modifies Entities with the DOTSDynamicBone_BufferElement and the other one modifies DOTS Dynamic Bone Entities with Independant attributes. Entities .WithName(\"DOTSDynamicBoneMultipleWithPresetCollidersJob\") .WithBurst() .WithReadOnly(GetLTWR) .WithNone<IndependantDOTSDynamicBone_Tag>() .WithReadOnly(collisionWorld) .ForEach((Entity entity, ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { ... }) .ScheduleParallel(); Entities .WithName(\"DOTSDynamicBoneWithPresetCollidersJob\") .WithBurst() .WithNone<IndependantDOTSDynamicBone_Tag>() .WithReadOnly(GetLTWR) .WithReadOnly(collisionWorld) .ForEach((Entity e, ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw) => { ... }) .ScheduleParallel(); Entities .WithName(\"IndependantDOTSDynamicBoneWithPresetCollidersJob\") .WithBurst() .WithReadOnly(GetLTWR) .WithReadOnly(GetAnimatedLocalToWorld) .WithReadOnly(collisionWorld) .ForEach((ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in IndependantDOTSDynamicBone_Tag tag) => { ... }) .ScheduleParallel(); Entities .WithName(\"IndependantDOTSDynamicBoneMultipleWithColliders\") .WithBurst() .WithReadOnly(GetLTWR) .WithReadOnly(collisionWorld) .WithReadOnly(GetAnimatedLocalToWorld) .ForEach((ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, ref DynamicBuffer<DOTSDynamicBoneCollider_BufferElement> m_Colliders, in IndependantDOTSDynamicBone_Tag tag) => { ... }) .ScheduleParallel(); NOTE: the AnimtedLocalToRoot data isn't updated in these jobs. DOTSDynamicBoneNaturalPhysicsCollisionSystem The DOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneMultipleNaturalCollisionUpdateJob IndependantDOTSDynamicBoneNaturalCollisionUpdateJob DOTSDynamicBoneIndependantMultipleNaturalCollisionUpdateJob are responsible for updating DOTS Dynamic Bone Entities associated with the Natural Collision System. The difference between them is the that one modifies Entities with the DOTSDynamicBone data component, the other modifies Entities with the DOTSDynamicBone_BufferElement and the other one modifies DOTS Dynamic Bone Entities with Independant attributes. Entities .WithName(\"DOTSDynamicBoneNaturalCollisionUpdateJob\") .WithBurst() .WithNone<DOTSDynamicBone_BufferElement>() .WithNone<DOTSDynamicBoneCollider_BufferElement>() .WithNone<IndependantDOTSDynamicBone_Tag>() //.WithReadOnly(GetLTWR) .WithReadOnly(collisionWorld) .ForEach((Entity e, ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, in DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, in LocalToWorld coreLTW, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw, in DOTSDynamicBoneNaturalCollider_Tag tag) => { ... }) .ScheduleParallel(); Entities .WithName(\"DOTSDynamicBoneMultipleNaturalCollisionUpdateJob\") .WithBurst() .WithNone<DOTSDynamicBoneCollider_BufferElement>() .WithNone<IndependantDOTSDynamicBone_Tag>() .WithReadOnly(collisionWorld) .ForEach((Entity e, DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, in DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> altr, in LocalToWorld coreLTW, in DynamicBuffer<Unity.Animation.AnimatedLocalToWorld> altw, in DOTSDynamicBoneNaturalCollider_Tag tag) => { ... }) .ScheduleParallel(); Entities .WithName(\"IndependantDOTSDynamicBoneNaturalCollisionUpdateSystem\") .WithNone<DOTSDynamicBoneCollider_BufferElement>() .WithNone<DOTSDynamicBone_BufferElement>() .WithBurst() .WithReadOnly(GetLTWR) .WithReadOnly(GetAnimatedLocalToWorld) .WithReadOnly(collisionWorld) .ForEach((ref DOTSDynamicBone bone, ref DynamicBuffer<Particle> particles, in IndependantDOTSDynamicBone_Tag tag, in DOTSDynamicBoneNaturalCollider_Tag tag2) => { ... }) .ScheduleParallel(); Entities .WithName(\"DOTSDynamicBoneIndependantMultipleNaturalCollisionUpdateSystem\") .WithNone<DOTSDynamicBoneCollider_BufferElement>() .WithNone<DOTSDynamicBone>() .WithBurst() .WithReadOnly(GetLTWR) .WithReadOnly(GetAnimatedLocalToWorld) .WithReadOnly(collisionWorld) .ForEach((ref DynamicBuffer<DOTSDynamicBone_BufferElement> bones, ref DynamicBuffer<Particle> particles, in IndependantDOTSDynamicBone_Tag tag, in DOTSDynamicBoneNaturalCollider_Tag tag2) => { ... }) .ScheduleParallel(); NOTE: the AnimtedLocalToRoot data isn't updated in these jobs. DOTSDynamicBoneUpdateSystem The DOTSDynamicBoneUpdateJob , DOTSDynamicBoneMultipleUpdateJob , IndependantDOTSDynamicBoneJob , and the DOTSDynamicBoneIndependantMultipleJob are responsible for updating the non-collision associated DOT Dynamic Bone Entities. The difference between them is the **DOTS Dynamic Bone data componant. The DOTSDynamicBoneCollisionFinishJob , DOTSDynamicBoneMultipleCollisionFinishJob , and the DOTSDynamicBoneIndependantCollisionFinishSystem is responsible for finalizing some calculations after another specific job is done. In an effeot to keep Jobs multithreaded, some processes needed to be broken up in order to allow for parallel writing in burst. For example, the IndependantDOTSDynamicBone Entity can be seperate from the Entity it is associated with. Since Parallel writting isn't allowed on another entity, I break up the update method and the AnimatedLocalToRoot update method into 2 Jobs to allow for parallel writing for methods. Remarks It it important to remeber that the Jobs and systems are subject to change so if you have any comments or suggestions, please let me know at link"
  },
  "manual/DOTSDynamicBone.Concepts.Particles.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Particles.html",
    "title": "Particles | DOTS Dynamic Bone",
    "keywords": "What is a Particle? Particles in DOTS Dynamic Bone is a data structure that represents a Bone within a model i.e: a Hip, Finger, Hair, or Tail bone. The Particles are updated and modified during the simulation based on the Particle and [DOTSDynamicBone](xref:DOTSDynamicBone. DOTSDynamicBone) parameters. Particles also can represent different things like segments, or divisions within a model. During each update, data from the associated DOTSDynamicBone is used to update the Particles in an initalization-like step. Afterward, the Particles is put through different methods that update its position and rotation based on the input data. Where is a Particle Created? A Particle is created during the Convert() call in a DOT Dynamic Bone Component . You also have the option to create one yourself using one of the static methods within the Particle struct. Example #1: // This is an example on how to add a particle from a MonoBehaviour. // NOTE: DOTS Dynamic Bone systems also require a DOTSDynamicBone or a // DOTSDynamicBone_BufferElement to be present as well otherwise, // the particle's data won't be processed or updated. public class CreateParticleComponent : MonoBehaviour, IConvertGameObjectToEntity{ public Transform TailBone; // Optional boolean value public bool m_ExcludeParticleFromCalculations = false; // Optional boolean value public bool m_ExcludeParticleFromCollision = false; public void start(){...} public void onValidate(){...} /// <summary> /// Sets up the Entity during conversion /// </summary> /// <param name=\"entity\">The entity the GameObject will be convert to. </param> /// <param name=\"dstManager\">The provided Entitymanager for conversion. </param> /// <param name=\"conversionSystem\">The provided GameObjectConversionSystem for conversion. </param> public void Convert(Entity entity, EntityManager dstManager, GameObjectConversionSystem conversionSystem){ DynamicBuffer<Particle> m_Particles = dstManager.AddBuffer<Particle>(entity); m_Particles.Add( Particle.Create( m_ConversionSystem, TailBone, m_ExcludeParticleFromCalculations, m_ExcludeFromCollision ) ); } } Example #2 // this is an example on how to add a particle if you alread have the Particle's Entity but did not add it to an Entity with // either a DOTSDynamicBone or a DOTSDynamicBone_BufferElement ... DynamicBuffer<Particle> m_Particles = GetBufferFromEntity<Particle>(DOTSDynamicBoneEntity); m_Particles.Add( Particle.Create( m_ParticleEnity, new ParticleTransform( position, localPosition, rotation, localRotation, localScale, lossyScale, childCount ) ) ); ... Please Check Out the Particle Scripting Api Page for more information on the Create method. Can I Modify a Particle? Yes, you can modify Particles during runtime by modifying the DynamicBuffer ! Here's an example on how to modify a Particle : ... DynamicBuffer<Particle> m_Particles = GetBufferFromEntity<Particle>(DOTSDynamicBoneEntity); int lastParticleIndex = m_Particles.Length-1; Particle particle = m_Particles[lastParticleIndex]; // now we modify the particles properties here. // some properties like disable and exclude require special functions to deal with. // this is because positions and rotations still need to be calculated otherwise other // particles may not look right and may experience \"much jank\". // when you call Disable(), the last values of m_Stiffness, m_Inert, // m_Damping, m_Friction, and m_Elasticity are stored in the Particle struct. Then // when you call Enable() those stored values are restored. particle.Disable(); particle.m_Radius *= 2; //multiply Particle radius by 2 // it's important to set the value of the buffer otherwise the changes won't take effect! m_Particles[i] = particle; ... Particle Property Overview Here I will go over some important properties of Particle . NOTE: Any properties not covered can be found here . Entity m_TransformEntity m_TransformEntity is the Entity the Particle is associated with. This is a required field during initialization and is recommended you don't modify this after initialization unless you know what you were doing. However, this field is required when your desired RigComponentEntity has the DOTSDynamicBoneParticleLocalToWorldOverride_Tag . ParticleTransform m_Transform m_Transform is a ParticleTransform that represents the Particle's transform component. since the RigidTransform didn't come with localPosition, local Rotation, localScale, and lossyScale, I made ParticleTransform . the transform is a public struct so you can create/initialize a ParticleTransform at any time. AnimatedLocalToRootIndex AnimatedLocalToRootIndex is an int that represents the index in the DynamicBuffer<Unity.Animation.AnimatedLocalToRoot> that is attached to the RigComponentEntity . m_ParentIndex m_ParentIndex is the index of the Particle's parent within the DynamicBuffer<Particle> buffer. If the m_ParentIndex is -1 then it is classified as a Root Bone/Particle. m_Radius m_Radius is the collision radius of a Particle that is used for the Preset Collision collision system. m_BoneLength the length of this Particle in relation to the associated Bone's total bone length. collider This is the Unity.Physics.PhysicCollider associated with the m_TransformEntity. If you are not using the Natural Colllision System then this value will be null."
  },
  "manual/DOTSDynamicBone.Concepts.Systems.html": {
    "href": "manual/DOTSDynamicBone.Concepts.Systems.html",
    "title": "Systems | DOTS Dynamic Bone",
    "keywords": "Systems DOTS Dynamic Bone contains 5 systems with each having a specific role and sepcfic execution location(Check the Systems tab for more information): NOTE: this list is ordered by when the system's Update call is executed DOTSDynamicBoneTransformOverrideSystem DOTSDynamicBoneCullingSystem DOTSDynamicBonePresetPhysicsCollisionSystem DOTSDynamicBoneNaturalCollisionSystem DOTSDynamicBoneUpdateSystem DOTSDynamicBoneTransformOverrideSystem The DOTSDynamicBoneTransformOverrideSystem is responsible for updating/overriding either the LocalToWorld, Translation, or Rotation ComponentData of an override's Entity . This system updates the Entity before the Build Physics World system which means that this system executes before collisions are performed globally. NOTE: a neat little consequence of this is that when overriding Transforms with DOTSDynamicBone and PhysicsJoints, by modifying the Translation and Rotation of the Entity you subsequently move the PhysicsJoint which is turn moves the Unity.Physics.PhysicCollider . This makes it so you can move Unity.Physics.PhysicColliders using DOTS Dynamic Bone and since DOTS Dynamic Bone works with Unity DOTS Animation then your DOTS Animations can move the Unity.Physics.PhysicCollider as well. pretty neat. DOTSDynamicBoneCullingSystem The DOTSDynamicBoneCullingSystem is responsible for performing culling checks. Each DOTS Dynamic Bone has culling data in it that makes it so if you exceed a distance from an Entity \"Like a Player\" then the DOT Dynmaic Bone calculations are no longer done on the Dynamic Bone Entity . Culling is great for instances where you want to save some computation time by not performing caculations on entities ourside a Players view. DOTSDynamicBonePresetPhysicsCollisionSystem The DOTSDynamicBonePresetPhysicsCollisionSystem is responsible for updating DOTS Dynamic Bone Entities with Preset collisions. DOTSDYnamicBoneNaturalPhysicsCollisionSystem The DOTSDYnamicBoneNaturalPhysicsCollisionSystem is responsible for updating DOTS Dynamic Bone Entities that use Natural DOTS Collision. DOTSDynamicBoneUpdateSystem The DOTSDynamicBoneUpdateSystem is responsible for a few things: Updating Non-Collision related DOTS Dynamic Bone Entites. Updating Entity information with Entities linked to an Independant DOTS Dynamic Bone Entity. Updating the AnimatedLocalToRoot data."
  },
  "manual/DOTSDynamicBone.ProjectSetup.html": {
    "href": "manual/DOTSDynamicBone.ProjectSetup.html",
    "title": "Project Setup | DOTS Dynamic Bone",
    "keywords": "Prerequisites NOTE: THIS WILL NOT WORK IN A NON-DOTS/ECS ENVIROMENT. YOU MUST BE WORKING IN UNITY DOTS & ECS Before you setup DOTS Dynamic Bone it is important that you import the following unity packages from the Package Manager (Note: links may not always send you to the latest version): Unity.Animation v0.9.0-preview.6 Unity.Entities v0.17.0-preview.42 Unity.Physics v0.6.0-preview.3 Unity.Rendering.Hybrid v0.11.0-preview.44 Either the Universal Render Pipeline and/or High Definition Render Pipeline . Setup After adding the required packages you will need to add these scripting defines to your project ENABLE_COMPUTE_DEFORMATIONS and is recommended you add these ENABLE_HYBRID_RENDERER_V2 UNITY_POST_PROCESSING_STACK_V2 That's it!"
  }
}